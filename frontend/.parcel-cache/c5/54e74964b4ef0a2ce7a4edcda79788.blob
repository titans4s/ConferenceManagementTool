var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
// A grid component using the following libs as inspiration.
//
// For the implementation:
// - https://getbootstrap.com/docs/4.3/layout/grid/
// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css
// - https://github.com/roylee0704/react-flexbox-grid
// - https://material.angularjs.org/latest/layout/introduction
//
// Follow this flexbox Guide to better understand the underlying model:
// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _requirePropFactory = require("../utils/requirePropFactory");
var _requirePropFactoryDefault = parcelHelpers.interopDefault(_requirePropFactory);
var SPACINGS = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10
];
var GRID_SIZES = [
    'auto',
    true,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12
];
function generateGrid(globalStyles, theme, breakpoint) {
    var styles = {
    };
    GRID_SIZES.forEach(function(size) {
        var key = "grid-".concat(breakpoint, "-").concat(size);
        if (size === true) {
            // For the auto layouting
            styles[key] = {
                flexBasis: 0,
                flexGrow: 1,
                maxWidth: '100%'
            };
            return;
        }
        if (size === 'auto') {
            styles[key] = {
                flexBasis: 'auto',
                flexGrow: 0,
                maxWidth: 'none'
            };
            return;
        } // Keep 7 significant numbers.
        var width = "".concat(Math.round(size / 12 * 100000000) / 1000000, "%"); // Close to the bootstrap implementation:
        // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41
        styles[key] = {
            flexBasis: width,
            flexGrow: 0,
            maxWidth: width
        };
    }); // No need for a media query for the first size.
    if (breakpoint === 'xs') _extendsDefault.default(globalStyles, styles);
    else globalStyles[theme.breakpoints.up(breakpoint)] = styles;
}
function getOffset(val) {
    var div = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var parse = parseFloat(val);
    return "".concat(parse / div).concat(String(val).replace(String(parse), '') || 'px');
}
function generateGutter(theme, breakpoint) {
    var styles = {
    };
    SPACINGS.forEach(function(spacing) {
        var themeSpacing = theme.spacing(spacing);
        if (themeSpacing === 0) return;
        styles["spacing-".concat(breakpoint, "-").concat(spacing)] = {
            margin: "-".concat(getOffset(themeSpacing, 2)),
            width: "calc(100% + ".concat(getOffset(themeSpacing), ")"),
            '& > $item': {
                padding: getOffset(themeSpacing, 2)
            }
        };
    });
    return styles;
} // Default CSS values
var styles = function styles1(theme) {
    return _extendsDefault.default({
        /* Styles applied to the root element. */ root: {
        },
        /* Styles applied to the root element if `container={true}`. */ container: {
            boxSizing: 'border-box',
            display: 'flex',
            flexWrap: 'wrap',
            width: '100%'
        },
        /* Styles applied to the root element if `item={true}`. */ item: {
            boxSizing: 'border-box',
            margin: '0'
        },
        /* Styles applied to the root element if `zeroMinWidth={true}`. */ zeroMinWidth: {
            minWidth: 0
        },
        /* Styles applied to the root element if `direction="column"`. */ 'direction-xs-column': {
            flexDirection: 'column'
        },
        /* Styles applied to the root element if `direction="column-reverse"`. */ 'direction-xs-column-reverse': {
            flexDirection: 'column-reverse'
        },
        /* Styles applied to the root element if `direction="row-reverse"`. */ 'direction-xs-row-reverse': {
            flexDirection: 'row-reverse'
        },
        /* Styles applied to the root element if `wrap="nowrap"`. */ 'wrap-xs-nowrap': {
            flexWrap: 'nowrap'
        },
        /* Styles applied to the root element if `wrap="reverse"`. */ 'wrap-xs-wrap-reverse': {
            flexWrap: 'wrap-reverse'
        },
        /* Styles applied to the root element if `alignItems="center"`. */ 'align-items-xs-center': {
            alignItems: 'center'
        },
        /* Styles applied to the root element if `alignItems="flex-start"`. */ 'align-items-xs-flex-start': {
            alignItems: 'flex-start'
        },
        /* Styles applied to the root element if `alignItems="flex-end"`. */ 'align-items-xs-flex-end': {
            alignItems: 'flex-end'
        },
        /* Styles applied to the root element if `alignItems="baseline"`. */ 'align-items-xs-baseline': {
            alignItems: 'baseline'
        },
        /* Styles applied to the root element if `alignContent="center"`. */ 'align-content-xs-center': {
            alignContent: 'center'
        },
        /* Styles applied to the root element if `alignContent="flex-start"`. */ 'align-content-xs-flex-start': {
            alignContent: 'flex-start'
        },
        /* Styles applied to the root element if `alignContent="flex-end"`. */ 'align-content-xs-flex-end': {
            alignContent: 'flex-end'
        },
        /* Styles applied to the root element if `alignContent="space-between"`. */ 'align-content-xs-space-between': {
            alignContent: 'space-between'
        },
        /* Styles applied to the root element if `alignContent="space-around"`. */ 'align-content-xs-space-around': {
            alignContent: 'space-around'
        },
        /* Styles applied to the root element if `justify="center"`. */ 'justify-xs-center': {
            justifyContent: 'center'
        },
        /* Styles applied to the root element if `justify="flex-end"`. */ 'justify-xs-flex-end': {
            justifyContent: 'flex-end'
        },
        /* Styles applied to the root element if `justify="space-between"`. */ 'justify-xs-space-between': {
            justifyContent: 'space-between'
        },
        /* Styles applied to the root element if `justify="space-around"`. */ 'justify-xs-space-around': {
            justifyContent: 'space-around'
        },
        /* Styles applied to the root element if `justify="space-evenly"`. */ 'justify-xs-space-evenly': {
            justifyContent: 'space-evenly'
        }
    }, generateGutter(theme, 'xs'), theme.breakpoints.keys.reduce(function(accumulator, key) {
        // Use side effect over immutability for better performance.
        generateGrid(accumulator, theme, key);
        return accumulator;
    }, {
    }));
};
var Grid = /*#__PURE__*/ _react.forwardRef(function Grid1(props, ref) {
    var _props$alignContent = props.alignContent, alignContent = _props$alignContent === void 0 ? 'stretch' : _props$alignContent, _props$alignItems = props.alignItems, alignItems = _props$alignItems === void 0 ? 'stretch' : _props$alignItems, classes = props.classes, classNameProp = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$container = props.container, container = _props$container === void 0 ? false : _props$container, _props$direction = props.direction, direction = _props$direction === void 0 ? 'row' : _props$direction, _props$item = props.item, item = _props$item === void 0 ? false : _props$item, _props$justify = props.justify, justify = _props$justify === void 0 ? 'flex-start' : _props$justify, _props$lg = props.lg, lg = _props$lg === void 0 ? false : _props$lg, _props$md = props.md, md = _props$md === void 0 ? false : _props$md, _props$sm = props.sm, sm = _props$sm === void 0 ? false : _props$sm, _props$spacing = props.spacing, spacing = _props$spacing === void 0 ? 0 : _props$spacing, _props$wrap = props.wrap, wrap = _props$wrap === void 0 ? 'wrap' : _props$wrap, _props$xl = props.xl, xl = _props$xl === void 0 ? false : _props$xl, _props$xs = props.xs, xs = _props$xs === void 0 ? false : _props$xs, _props$zeroMinWidth = props.zeroMinWidth, zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth, other = _objectWithoutPropertiesDefault.default(props, [
        "alignContent",
        "alignItems",
        "classes",
        "className",
        "component",
        "container",
        "direction",
        "item",
        "justify",
        "lg",
        "md",
        "sm",
        "spacing",
        "wrap",
        "xl",
        "xs",
        "zeroMinWidth"
    ]);
    var className = _clsxDefault.default(classes.root, classNameProp, container && [
        classes.container,
        spacing !== 0 && classes["spacing-xs-".concat(String(spacing))]
    ], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== 'row' && classes["direction-xs-".concat(String(direction))], wrap !== 'wrap' && classes["wrap-xs-".concat(String(wrap))], alignItems !== 'stretch' && classes["align-items-xs-".concat(String(alignItems))], alignContent !== 'stretch' && classes["align-content-xs-".concat(String(alignContent))], justify !== 'flex-start' && classes["justify-xs-".concat(String(justify))], xs !== false && classes["grid-xs-".concat(String(xs))], sm !== false && classes["grid-sm-".concat(String(sm))], md !== false && classes["grid-md-".concat(String(md))], lg !== false && classes["grid-lg-".concat(String(lg))], xl !== false && classes["grid-xl-".concat(String(xl))]);
    return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        className: className,
        ref: ref
    }, other)));
});
Grid.propTypes = {
    /**
   * Defines the `align-content` style property.
   * It's applied for all screen sizes.
   */ alignContent: _propTypesDefault.default.oneOf([
        'stretch',
        'center',
        'flex-start',
        'flex-end',
        'space-between',
        'space-around'
    ]),
    /**
   * Defines the `align-items` style property.
   * It's applied for all screen sizes.
   */ alignItems: _propTypesDefault.default.oneOf([
        'flex-start',
        'center',
        'flex-end',
        'stretch',
        'baseline'
    ]),
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object.isRequired,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .elementType,
    /**
   * If `true`, the component will have the flex *container* behavior.
   * You should be wrapping *items* with a *container*.
   */ container: _propTypesDefault.default.bool,
    /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   */ direction: _propTypesDefault.default.oneOf([
        'row',
        'row-reverse',
        'column',
        'column-reverse'
    ]),
    /**
   * If `true`, the component will have the flex *item* behavior.
   * You should be wrapping *items* with a *container*.
   */ item: _propTypesDefault.default.bool,
    /**
   * Defines the `justify-content` style property.
   * It is applied for all screen sizes.
   */ justify: _propTypesDefault.default.oneOf([
        'flex-start',
        'center',
        'flex-end',
        'space-between',
        'space-around',
        'space-evenly'
    ]),
    /**
   * Defines the number of grids the component is going to use.
   * It's applied for the `lg` breakpoint and wider screens if not overridden.
   */ lg: _propTypesDefault.default.oneOf([
        false,
        'auto',
        true,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
    ]),
    /**
   * Defines the number of grids the component is going to use.
   * It's applied for the `md` breakpoint and wider screens if not overridden.
   */ md: _propTypesDefault.default.oneOf([
        false,
        'auto',
        true,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
    ]),
    /**
   * Defines the number of grids the component is going to use.
   * It's applied for the `sm` breakpoint and wider screens if not overridden.
   */ sm: _propTypesDefault.default.oneOf([
        false,
        'auto',
        true,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
    ]),
    /**
   * Defines the space between the type `item` component.
   * It can only be used on a type `container` component.
   */ spacing: _propTypesDefault.default.oneOf(SPACINGS),
    /**
   * Defines the `flex-wrap` style property.
   * It's applied for all screen sizes.
   */ wrap: _propTypesDefault.default.oneOf([
        'nowrap',
        'wrap',
        'wrap-reverse'
    ]),
    /**
   * Defines the number of grids the component is going to use.
   * It's applied for the `xl` breakpoint and wider screens.
   */ xl: _propTypesDefault.default.oneOf([
        false,
        'auto',
        true,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
    ]),
    /**
   * Defines the number of grids the component is going to use.
   * It's applied for all the screen sizes with the lowest priority.
   */ xs: _propTypesDefault.default.oneOf([
        false,
        'auto',
        true,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
    ]),
    /**
   * If `true`, it sets `min-width: 0` on the item.
   * Refer to the limitations section of the documentation to better understand the use case.
   */ zeroMinWidth: _propTypesDefault.default.bool
};
var StyledGrid = _withStylesDefault.default(styles, {
    name: 'MuiGrid'
})(Grid);
var requireProp = _requirePropFactoryDefault.default('Grid');
StyledGrid.propTypes = _extendsDefault.default({
}, StyledGrid.propTypes, {
    alignContent: requireProp('container'),
    alignItems: requireProp('container'),
    direction: requireProp('container'),
    justify: requireProp('container'),
    lg: requireProp('item'),
    md: requireProp('item'),
    sm: requireProp('item'),
    spacing: requireProp('container'),
    wrap: requireProp('container'),
    xs: requireProp('item'),
    zeroMinWidth: requireProp('item')
});
exports.default = StyledGrid;
