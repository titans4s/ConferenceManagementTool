var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _stepConnector = require("../StepConnector");
var _stepConnectorDefault = parcelHelpers.interopDefault(_stepConnector);
var styles = {
    /* Styles applied to the root element. */ root: {
        display: 'flex',
        padding: 24
    },
    /* Styles applied to the root element if `orientation="horizontal"`. */ horizontal: {
        flexDirection: 'row',
        alignItems: 'center'
    },
    /* Styles applied to the root element if `orientation="vertical"`. */ vertical: {
        flexDirection: 'column'
    },
    /* Styles applied to the root element if `alternativeLabel={true}`. */ alternativeLabel: {
        alignItems: 'flex-start'
    }
};
var defaultConnector = /*#__PURE__*/ _react.createElement(_stepConnectorDefault.default, null);
var Stepper = /*#__PURE__*/ _react.forwardRef(function Stepper1(props, ref) {
    var _props$activeStep = props.activeStep, activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep, _props$alternativeLab = props.alternativeLabel, alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab, children = props.children, classes = props.classes, className = props.className, _props$connector = props.connector, connectorProp = _props$connector === void 0 ? defaultConnector : _props$connector, _props$nonLinear = props.nonLinear, nonLinear = _props$nonLinear === void 0 ? false : _props$nonLinear, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation, other = _objectWithoutPropertiesDefault.default(props, [
        "activeStep",
        "alternativeLabel",
        "children",
        "classes",
        "className",
        "connector",
        "nonLinear",
        "orientation"
    ]);
    var connector = /*#__PURE__*/ _react.isValidElement(connectorProp) ? /*#__PURE__*/ _react.cloneElement(connectorProp, {
        orientation: orientation
    }) : null;
    var childrenArray = _react.Children.toArray(children);
    var steps = childrenArray.map(function(step, index) {
        var state = {
            index: index,
            active: false,
            completed: false,
            disabled: false
        };
        if (activeStep === index) state.active = true;
        else if (!nonLinear && activeStep > index) state.completed = true;
        else if (!nonLinear && activeStep < index) state.disabled = true;
        return(/*#__PURE__*/ _react.cloneElement(step, _extendsDefault.default({
            alternativeLabel: alternativeLabel,
            connector: connector,
            last: index + 1 === childrenArray.length,
            orientation: orientation
        }, state, step.props)));
    });
    return(/*#__PURE__*/ _react.createElement(_paperDefault.default, _extendsDefault.default({
        square: true,
        elevation: 0,
        className: _clsxDefault.default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel),
        ref: ref
    }, other), steps));
});
Stepper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Set the active step (zero based index).
   * Set to -1 to disable all the steps.
   */ activeStep: _propTypesDefault.default.number,
    /**
   * If set to 'true' and orientation is horizontal,
   * then the step label will be positioned under the icon.
   */ alternativeLabel: _propTypesDefault.default.bool,
    /**
   * Two or more `<Step />` components.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * An element to be placed between each step.
   */ connector: _propTypesDefault.default.element,
    /**
   * If set the `Stepper` will not assist in controlling steps for linear flow.
   */ nonLinear: _propTypesDefault.default.bool,
    /**
   * The stepper orientation (layout flow direction).
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ])
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiStepper'
})(Stepper);
