var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isWidthUp", ()=>isWidthUp
);
parcelHelpers.export(exports, "isWidthDown", ()=>isWidthDown
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _utils = require("@material-ui/utils");
var _styles = require("@material-ui/styles");
var _hoistNonReactStatics = require("hoist-non-react-statics");
var _hoistNonReactStaticsDefault = parcelHelpers.interopDefault(_hoistNonReactStatics);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _createBreakpoints = require("../styles/createBreakpoints");
var _useMediaQuery = require("../useMediaQuery"); // By default, returns true if screen width is the same or greater than the given breakpoint.
var _useMediaQueryDefault = parcelHelpers.interopDefault(_useMediaQuery);
var isWidthUp = function isWidthUp1(breakpoint, width) {
    var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (inclusive) return _createBreakpoints.keys.indexOf(breakpoint) <= _createBreakpoints.keys.indexOf(width);
    return _createBreakpoints.keys.indexOf(breakpoint) < _createBreakpoints.keys.indexOf(width);
}; // By default, returns true if screen width is the same or less than the given breakpoint.
var isWidthDown = function isWidthDown1(breakpoint, width) {
    var inclusive = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    if (inclusive) return _createBreakpoints.keys.indexOf(width) <= _createBreakpoints.keys.indexOf(breakpoint);
    return _createBreakpoints.keys.indexOf(width) < _createBreakpoints.keys.indexOf(breakpoint);
};
var useEnhancedEffect = typeof window === 'undefined' ? _react.useEffect : _react.useLayoutEffect;
var withWidth = function withWidth1() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    };
    return function(Component) {
        var _options$withTheme = options.withTheme, withThemeOption = _options$withTheme === void 0 ? false : _options$withTheme, _options$noSSR = options.noSSR, noSSR = _options$noSSR === void 0 ? false : _options$noSSR, initialWidthOption = options.initialWidth;
        function WithWidth(props) {
            var contextTheme = _useThemeDefault.default();
            var theme = props.theme || contextTheme;
            var _getThemeProps = _styles.getThemeProps({
                theme: theme,
                name: 'MuiWithWidth',
                props: _extendsDefault.default({
                }, props)
            }), initialWidth = _getThemeProps.initialWidth, width = _getThemeProps.width, other = _objectWithoutPropertiesDefault.default(_getThemeProps, [
                "initialWidth",
                "width"
            ]);
            var _React$useState = _react.useState(false), mountedState = _React$useState[0], setMountedState = _React$useState[1];
            useEnhancedEffect(function() {
                setMountedState(true);
            }, []);
            /**
       * innerWidth |xs      sm      md      lg      xl
       *            |-------|-------|-------|-------|------>
       * width      |  xs   |  sm   |  md   |  lg   |  xl
       */ var keys = theme.breakpoints.keys.slice().reverse();
            var widthComputed = keys.reduce(function(output, key) {
                // eslint-disable-next-line react-hooks/rules-of-hooks
                var matches = _useMediaQueryDefault.default(theme.breakpoints.up(key));
                return !output && matches ? key : output;
            }, null);
            var more = _extendsDefault.default({
                width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption
            }, withThemeOption ? {
                theme: theme
            } : {
            }, other); // When rendering the component on the server,
            // we have no idea about the client browser screen width.
            // In order to prevent blinks and help the reconciliation of the React tree
            // we are not rendering the child component.
            //
            // An alternative is to use the `initialWidth` property.
            if (more.width === undefined) return null;
            return(/*#__PURE__*/ _react.createElement(Component, more));
        }
        WithWidth.propTypes = {
            /**
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use an heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */ initialWidth: _propTypesDefault.default.oneOf([
                'xs',
                'sm',
                'md',
                'lg',
                'xl'
            ]),
            /**
       * @ignore
       */ theme: _propTypesDefault.default.object,
            /**
       * Bypass the width calculation logic.
       */ width: _propTypesDefault.default.oneOf([
                'xs',
                'sm',
                'md',
                'lg',
                'xl'
            ])
        };
        WithWidth.displayName = "WithWidth(".concat(_utils.getDisplayName(Component), ")");
        _hoistNonReactStaticsDefault.default(WithWidth, Component);
        return WithWidth;
    };
};
exports.default = withWidth;
