var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _colorManipulator = require("../styles/colorManipulator");
var styles = function styles1(theme) {
    var emphasis = theme.palette.type === 'light' ? 0.8 : 0.98;
    var backgroundColor = _colorManipulator.emphasize(theme.palette.background.default, emphasis);
    return {
        /* Styles applied to the root element. */ root: _extendsDefault.default({
        }, theme.typography.body2, _definePropertyDefault.default({
            color: theme.palette.getContrastText(backgroundColor),
            backgroundColor: backgroundColor,
            display: 'flex',
            alignItems: 'center',
            flexWrap: 'wrap',
            padding: '6px 16px',
            borderRadius: theme.shape.borderRadius,
            flexGrow: 1
        }, theme.breakpoints.up('sm'), {
            flexGrow: 'initial',
            minWidth: 288
        })),
        /* Styles applied to the message wrapper element. */ message: {
            padding: '8px 0'
        },
        /* Styles applied to the action wrapper element if `action` is provided. */ action: {
            display: 'flex',
            alignItems: 'center',
            marginLeft: 'auto',
            paddingLeft: 16,
            marginRight: -8
        }
    };
};
var SnackbarContent = /*#__PURE__*/ _react.forwardRef(function SnackbarContent1(props, ref) {
    var action = props.action, classes = props.classes, className = props.className, message = props.message, _props$role = props.role, role = _props$role === void 0 ? 'alert' : _props$role, other = _objectWithoutPropertiesDefault.default(props, [
        "action",
        "classes",
        "className",
        "message",
        "role"
    ]);
    return(/*#__PURE__*/ _react.createElement(_paperDefault.default, _extendsDefault.default({
        role: role,
        square: true,
        elevation: 6,
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other), /*#__PURE__*/ _react.createElement("div", {
        className: classes.message
    }, message), action ? /*#__PURE__*/ _react.createElement("div", {
        className: classes.action
    }, action) : null));
});
SnackbarContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */ action: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The message to display.
   */ message: _propTypesDefault.default.node,
    /**
   * The ARIA role attribute of the element.
   */ role: _propTypesDefault.default.string
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiSnackbarContent'
})(SnackbarContent);
