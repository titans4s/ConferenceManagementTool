var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var styles = {
    /* Styles applied to the root element. */ root: {
        display: 'flex',
        alignItems: 'center',
        padding: 8,
        justifyContent: 'flex-end'
    },
    /* Styles applied to the root element if `disableSpacing={false}`. */ spacing: {
        '& > :not(:first-child)': {
            marginLeft: 8
        }
    }
};
var warnedOnce = false;
/**
 * ⚠️ The ExpansionPanelActions component was renamed to AccordionActions to use a more common naming convention.
 *
 * You should use `import { AccordionActions } from '@material-ui/core'`
 * or `import AccordionActions from '@material-ui/core/AccordionActions'`.
 */ var ExpansionPanelActions = /*#__PURE__*/ _react.forwardRef(function ExpansionPanelActions1(props, ref) {
    if (!warnedOnce) {
        warnedOnce = true;
        console.error([
            'Material-UI: the ExpansionPanelActions component was renamed to AccordionActions to use a more common naming convention.',
            '',
            "You should use `import { AccordionActions } from '@material-ui/core'`",
            "or `import AccordionActions from '@material-ui/core/AccordionActions'`"
        ].join('\n'));
    }
    var classes = props.classes, className = props.className, _props$disableSpacing = props.disableSpacing, disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing, other = _objectWithoutPropertiesDefault.default(props, [
        "classes",
        "className",
        "disableSpacing"
    ]);
    return(/*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className, !disableSpacing && classes.spacing),
        ref: ref
    }, other)));
});
ExpansionPanelActions.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, the actions do not have additional margin.
   */ disableSpacing: _propTypesDefault.default.bool
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiExpansionPanelActions'
})(ExpansionPanelActions);
