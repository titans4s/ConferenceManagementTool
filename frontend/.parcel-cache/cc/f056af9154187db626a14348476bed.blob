var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
/* eslint-disable jsx-a11y/aria-role */ var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _buttonBase = require("../ButtonBase");
var _buttonBaseDefault = parcelHelpers.interopDefault(_buttonBase);
var _iconButton = require("../IconButton");
var _iconButtonDefault = parcelHelpers.interopDefault(_iconButton);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _accordionContext = require("../Accordion/AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var styles = function styles1(theme) {
    var transition = {
        duration: theme.transitions.duration.shortest
    };
    return {
        /* Styles applied to the root element. */ root: {
            display: 'flex',
            minHeight: 48,
            transition: theme.transitions.create([
                'min-height',
                'background-color'
            ], transition),
            padding: theme.spacing(0, 2),
            '&:hover:not($disabled)': {
                cursor: 'pointer'
            },
            '&$expanded': {
                minHeight: 64
            },
            '&$focused': {
                backgroundColor: theme.palette.action.focus
            },
            '&$disabled': {
                opacity: theme.palette.action.disabledOpacity
            }
        },
        /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */ expanded: {
        },
        /* Pseudo-class applied to the root element if `focused={true}`. */ focused: {
        },
        /* Pseudo-class applied to the root element if `disabled={true}`. */ disabled: {
        },
        /* Styles applied to the children wrapper element. */ content: {
            display: 'flex',
            flexGrow: 1,
            transition: theme.transitions.create([
                'margin'
            ], transition),
            margin: '12px 0',
            '&$expanded': {
                margin: '20px 0'
            }
        },
        /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */ expandIcon: {
            transform: 'rotate(0deg)',
            transition: theme.transitions.create('transform', transition),
            '&:hover': {
                // Disable the hover effect for the IconButton,
                // because a hover effect should apply to the entire Expand button and
                // not only to the IconButton.
                backgroundColor: 'transparent'
            },
            '&$expanded': {
                transform: 'rotate(180deg)'
            }
        }
    };
};
var AccordionSummary = /*#__PURE__*/ _react.forwardRef(function AccordionSummary1(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, expandIcon = props.expandIcon, IconButtonProps = props.IconButtonProps, onBlur = props.onBlur, onClick = props.onClick, onFocusVisible = props.onFocusVisible, other = _objectWithoutPropertiesDefault.default(props, [
        "children",
        "classes",
        "className",
        "expandIcon",
        "IconButtonProps",
        "onBlur",
        "onClick",
        "onFocusVisible"
    ]);
    var _React$useState = _react.useState(false), focusedState = _React$useState[0], setFocusedState = _React$useState[1];
    var handleFocusVisible = function handleFocusVisible1(event) {
        setFocusedState(true);
        if (onFocusVisible) onFocusVisible(event);
    };
    var handleBlur = function handleBlur1(event) {
        setFocusedState(false);
        if (onBlur) onBlur(event);
    };
    var _React$useContext = _react.useContext(_accordionContextDefault.default), _React$useContext$dis = _React$useContext.disabled, disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis, expanded = _React$useContext.expanded, toggle = _React$useContext.toggle;
    var handleChange = function handleChange1(event) {
        if (toggle) toggle(event);
        if (onClick) onClick(event);
    };
    return(/*#__PURE__*/ _react.createElement(_buttonBaseDefault.default, _extendsDefault.default({
        focusRipple: false,
        disableRipple: true,
        disabled: disabled,
        component: "div",
        "aria-expanded": expanded,
        className: _clsxDefault.default(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),
        onFocusVisible: handleFocusVisible,
        onBlur: handleBlur,
        onClick: handleChange,
        ref: ref
    }, other), /*#__PURE__*/ _react.createElement("div", {
        className: _clsxDefault.default(classes.content, expanded && classes.expanded)
    }, children), expandIcon && /*#__PURE__*/ _react.createElement(_iconButtonDefault.default, _extendsDefault.default({
        className: _clsxDefault.default(classes.expandIcon, expanded && classes.expanded),
        edge: "end",
        component: "div",
        tabIndex: null,
        role: null,
        "aria-hidden": true
    }, IconButtonProps), expandIcon)));
});
AccordionSummary.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the accordion summary.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The icon to display as the expand indicator.
   */ expandIcon: _propTypesDefault.default.node,
    /**
   * Props applied to the `IconButton` element wrapping the expand icon.
   */ IconButtonProps: _propTypesDefault.default.object,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onClick: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocusVisible: _propTypesDefault.default.func
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiAccordionSummary'
})(AccordionSummary);
