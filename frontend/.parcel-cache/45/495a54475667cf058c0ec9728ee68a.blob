var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var styles = function styles1(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            flex: '1 1 auto',
            WebkitOverflowScrolling: 'touch',
            // Add iOS momentum scrolling.
            overflowY: 'auto',
            padding: '8px 24px',
            '&:first-child': {
                // dialog without title
                paddingTop: 20
            }
        },
        /* Styles applied to the root element if `dividers={true}`. */ dividers: {
            padding: '16px 24px',
            borderTop: "1px solid ".concat(theme.palette.divider),
            borderBottom: "1px solid ".concat(theme.palette.divider)
        }
    };
};
var DialogContent = /*#__PURE__*/ _react.forwardRef(function DialogContent1(props, ref) {
    var classes = props.classes, className = props.className, _props$dividers = props.dividers, dividers = _props$dividers === void 0 ? false : _props$dividers, other = _objectWithoutPropertiesDefault.default(props, [
        "classes",
        "className",
        "dividers"
    ]);
    return(/*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className, dividers && classes.dividers),
        ref: ref
    }, other)));
});
DialogContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Display the top and bottom dividers.
   */ dividers: _propTypesDefault.default.bool
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiDialogContent'
})(DialogContent);
