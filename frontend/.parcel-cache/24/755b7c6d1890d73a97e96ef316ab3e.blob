var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _utils = require("@material-ui/utils");
var _cssUtils = require("./cssUtils");
function responsiveFontSizes(themeInput) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    };
    var _options$breakpoints = options.breakpoints, breakpoints = _options$breakpoints === void 0 ? [
        'sm',
        'md',
        'lg'
    ] : _options$breakpoints, _options$disableAlign = options.disableAlign, disableAlign = _options$disableAlign === void 0 ? false : _options$disableAlign, _options$factor = options.factor, factor = _options$factor === void 0 ? 2 : _options$factor, _options$variants = options.variants, variants = _options$variants === void 0 ? [
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'subtitle1',
        'subtitle2',
        'body1',
        'body2',
        'caption',
        'button',
        'overline'
    ] : _options$variants;
    var theme = _extendsDefault.default({
    }, themeInput);
    theme.typography = _extendsDefault.default({
    }, theme.typography);
    var typography = theme.typography; // Convert between css lengths e.g. em->px or px->rem
    // Set the baseFontSize for your project. Defaults to 16px (also the browser default).
    var convert = _cssUtils.convertLength(typography.htmlFontSize);
    var breakpointValues = breakpoints.map(function(x) {
        return theme.breakpoints.values[x];
    });
    variants.forEach(function(variant) {
        var style = typography[variant];
        var remFontSize = parseFloat(convert(style.fontSize, 'rem'));
        if (remFontSize <= 1) return;
        var maxFontSize = remFontSize;
        var minFontSize = 1 + (maxFontSize - 1) / factor;
        var lineHeight = style.lineHeight;
        if (!_cssUtils.isUnitless(lineHeight) && !disableAlign) throw new Error("Material-UI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.");
        if (!_cssUtils.isUnitless(lineHeight)) // make it unitless
        lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);
        var transform = null;
        if (!disableAlign) transform = function transform1(value) {
            return _cssUtils.alignProperty({
                size: value,
                grid: _cssUtils.fontGrid({
                    pixels: 4,
                    lineHeight: lineHeight,
                    htmlFontSize: typography.htmlFontSize
                })
            });
        };
        typography[variant] = _extendsDefault.default({
        }, style, _cssUtils.responsiveProperty({
            cssProperty: 'fontSize',
            min: minFontSize,
            max: maxFontSize,
            unit: 'rem',
            breakpoints: breakpointValues,
            transform: transform
        }));
    });
    return theme;
}
exports.default = responsiveFontSizes;
