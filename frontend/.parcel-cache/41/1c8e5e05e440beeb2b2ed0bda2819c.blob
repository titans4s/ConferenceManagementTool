var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var styles = function styles1(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            position: 'absolute',
            left: 0,
            right: 0,
            height: 48,
            background: 'rgba(0, 0, 0, 0.5)',
            display: 'flex',
            alignItems: 'center',
            fontFamily: theme.typography.fontFamily
        },
        /* Styles applied to the root element if `titlePosition="bottom"`. */ titlePositionBottom: {
            bottom: 0
        },
        /* Styles applied to the root element if `titlePosition="top"`. */ titlePositionTop: {
            top: 0
        },
        /* Styles applied to the root element if a `subtitle` is provided. */ rootSubtitle: {
            height: 68
        },
        /* Styles applied to the title and subtitle container element. */ titleWrap: {
            flexGrow: 1,
            marginLeft: 16,
            marginRight: 16,
            color: theme.palette.common.white,
            overflow: 'hidden'
        },
        /* Styles applied to the container element if `actionPosition="left"`. */ titleWrapActionPosLeft: {
            marginLeft: 0
        },
        /* Styles applied to the container element if `actionPosition="right"`. */ titleWrapActionPosRight: {
            marginRight: 0
        },
        /* Styles applied to the title container element. */ title: {
            fontSize: theme.typography.pxToRem(16),
            lineHeight: '24px',
            textOverflow: 'ellipsis',
            overflow: 'hidden',
            whiteSpace: 'nowrap'
        },
        /* Styles applied to the subtitle container element. */ subtitle: {
            fontSize: theme.typography.pxToRem(12),
            lineHeight: 1,
            textOverflow: 'ellipsis',
            overflow: 'hidden',
            whiteSpace: 'nowrap'
        },
        /* Styles applied to the actionIcon if supplied. */ actionIcon: {
        },
        /* Styles applied to the actionIcon if `actionPosition="left"`. */ actionIconActionPosLeft: {
            order: -1
        }
    };
};
var GridListTileBar = /*#__PURE__*/ _react.forwardRef(function GridListTileBar1(props, ref) {
    var actionIcon = props.actionIcon, _props$actionPosition = props.actionPosition, actionPosition = _props$actionPosition === void 0 ? 'right' : _props$actionPosition, classes = props.classes, className = props.className, subtitle = props.subtitle, title = props.title, _props$titlePosition = props.titlePosition, titlePosition = _props$titlePosition === void 0 ? 'bottom' : _props$titlePosition, other = _objectWithoutPropertiesDefault.default(props, [
        "actionIcon",
        "actionPosition",
        "classes",
        "className",
        "subtitle",
        "title",
        "titlePosition"
    ]);
    var actionPos = actionIcon && actionPosition;
    return(/*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className, titlePosition === 'top' ? classes.titlePositionTop : classes.titlePositionBottom, subtitle && classes.rootSubtitle),
        ref: ref
    }, other), /*#__PURE__*/ _react.createElement("div", {
        className: _clsxDefault.default(classes.titleWrap, {
            'left': classes.titleWrapActionPosLeft,
            'right': classes.titleWrapActionPosRight
        }[actionPos])
    }, /*#__PURE__*/ _react.createElement("div", {
        className: classes.title
    }, title), subtitle ? /*#__PURE__*/ _react.createElement("div", {
        className: classes.subtitle
    }, subtitle) : null), actionIcon ? /*#__PURE__*/ _react.createElement("div", {
        className: _clsxDefault.default(classes.actionIcon, actionPos === 'left' && classes.actionIconActionPosLeft)
    }, actionIcon) : null));
});
GridListTileBar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * An IconButton element to be used as secondary action target
   * (primary action target is the tile itself).
   */ actionIcon: _propTypesDefault.default.node,
    /**
   * Position of secondary action IconButton.
   */ actionPosition: _propTypesDefault.default.oneOf([
        'left',
        'right'
    ]),
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * String or element serving as subtitle (support text).
   */ subtitle: _propTypesDefault.default.node,
    /**
   * Title to be displayed on tile.
   */ title: _propTypesDefault.default.node,
    /**
   * Position of the title bar.
   */ titlePosition: _propTypesDefault.default.oneOf([
        'bottom',
        'top'
    ])
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiGridListTileBar'
})(GridListTileBar);
