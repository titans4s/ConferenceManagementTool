var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _colorManipulator = require("../styles/colorManipulator");
var styles = function styles1(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            height: 1,
            margin: 0,
            // Reset browser default style.
            border: 'none',
            flexShrink: 0,
            backgroundColor: theme.palette.divider
        },
        /* Styles applied to the root element if `absolute={true}`. */ absolute: {
            position: 'absolute',
            bottom: 0,
            left: 0,
            width: '100%'
        },
        /* Styles applied to the root element if `variant="inset"`. */ inset: {
            marginLeft: 72
        },
        /* Styles applied to the root element if `light={true}`. */ light: {
            backgroundColor: _colorManipulator.fade(theme.palette.divider, 0.08)
        },
        /* Styles applied to the root element if `variant="middle"`. */ middle: {
            marginLeft: theme.spacing(2),
            marginRight: theme.spacing(2)
        },
        /* Styles applied to the root element if `orientation="vertical"`. */ vertical: {
            height: '100%',
            width: 1
        },
        /* Styles applied to the root element if `flexItem={true}`. */ flexItem: {
            alignSelf: 'stretch',
            height: 'auto'
        }
    };
};
var Divider = /*#__PURE__*/ _react.forwardRef(function Divider1(props, ref) {
    var _props$absolute = props.absolute, absolute = _props$absolute === void 0 ? false : _props$absolute, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'hr' : _props$component, _props$flexItem = props.flexItem, flexItem = _props$flexItem === void 0 ? false : _props$flexItem, _props$light = props.light, light = _props$light === void 0 ? false : _props$light, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation, _props$role = props.role, role = _props$role === void 0 ? Component !== 'hr' ? 'separator' : undefined : _props$role, _props$variant = props.variant, variant = _props$variant === void 0 ? 'fullWidth' : _props$variant, other = _objectWithoutPropertiesDefault.default(props, [
        "absolute",
        "classes",
        "className",
        "component",
        "flexItem",
        "light",
        "orientation",
        "role",
        "variant"
    ]);
    return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className, variant !== 'fullWidth' && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === 'vertical' && classes.vertical),
        role: role,
        ref: ref
    }, other)));
});
Divider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Absolutely position the element.
   */ absolute: _propTypesDefault.default.bool,
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .elementType,
    /**
   * If `true`, a vertical divider will have the correct height when used in flex container.
   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
   */ flexItem: _propTypesDefault.default.bool,
    /**
   * If `true`, the divider will have a lighter color.
   */ light: _propTypesDefault.default.bool,
    /**
   * The divider orientation.
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ]),
    /**
   * @ignore
   */ role: _propTypesDefault.default.string,
    /**
   * The variant to use.
   */ variant: _propTypesDefault.default.oneOf([
        'fullWidth',
        'inset',
        'middle'
    ])
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiDivider'
})(Divider);
