var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var styles = function styles1(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            flex: '1 1 auto'
        },
        /* Styles applied to the root element if `orientation="horizontal"`. */ horizontal: {
        },
        /* Styles applied to the root element if `orientation="vertical"`. */ vertical: {
            marginLeft: 12,
            // half icon
            padding: '0 0 8px'
        },
        /* Styles applied to the root element if `alternativeLabel={true}`. */ alternativeLabel: {
            position: 'absolute',
            top: 12,
            left: 'calc(-50% + 20px)',
            right: 'calc(50% + 20px)'
        },
        /* Pseudo-class applied to the root element if `active={true}`. */ active: {
        },
        /* Pseudo-class applied to the root element if `completed={true}`. */ completed: {
        },
        /* Pseudo-class applied to the root element if `disabled={true}`. */ disabled: {
        },
        /* Styles applied to the line element. */ line: {
            display: 'block',
            borderColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
        },
        /* Styles applied to the root element if `orientation="horizontal"`. */ lineHorizontal: {
            borderTopStyle: 'solid',
            borderTopWidth: 1
        },
        /* Styles applied to the root element if `orientation="vertical"`. */ lineVertical: {
            borderLeftStyle: 'solid',
            borderLeftWidth: 1,
            minHeight: 24
        }
    };
};
var StepConnector = /*#__PURE__*/ _react.forwardRef(function StepConnector1(props, ref) {
    var active = props.active, _props$alternativeLab = props.alternativeLabel, alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab, classes = props.classes, className = props.className, completed = props.completed, disabled = props.disabled, index = props.index, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation, other = _objectWithoutPropertiesDefault.default(props, [
        "active",
        "alternativeLabel",
        "classes",
        "className",
        "completed",
        "disabled",
        "index",
        "orientation"
    ]);
    return(/*#__PURE__*/ _react.createElement("div", _extendsDefault.default({
        className: _clsxDefault.default(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, active && classes.active, completed && classes.completed, disabled && classes.disabled),
        ref: ref
    }, other), /*#__PURE__*/ _react.createElement("span", {
        className: _clsxDefault.default(classes.line, {
            'horizontal': classes.lineHorizontal,
            'vertical': classes.lineVertical
        }[orientation])
    })));
});
StepConnector.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiStepConnector'
})(StepConnector);
