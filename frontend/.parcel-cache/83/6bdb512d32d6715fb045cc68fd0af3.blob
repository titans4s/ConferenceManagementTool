var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _typography = require("../Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var styles = {
    /* Styles applied to the root element. */ root: {
        display: 'flex',
        alignItems: 'center',
        padding: 16
    },
    /* Styles applied to the avatar element. */ avatar: {
        flex: '0 0 auto',
        marginRight: 16
    },
    /* Styles applied to the action element. */ action: {
        flex: '0 0 auto',
        alignSelf: 'flex-start',
        marginTop: -8,
        marginRight: -8
    },
    /* Styles applied to the content wrapper element. */ content: {
        flex: '1 1 auto'
    },
    /* Styles applied to the title Typography element. */ title: {
    },
    /* Styles applied to the subheader Typography element. */ subheader: {
    }
};
var CardHeader = /*#__PURE__*/ _react.forwardRef(function CardHeader1(props, ref) {
    var action = props.action, avatar = props.avatar, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$disableTypogra = props.disableTypography, disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra, subheaderProp = props.subheader, subheaderTypographyProps = props.subheaderTypographyProps, titleProp = props.title, titleTypographyProps = props.titleTypographyProps, other = _objectWithoutPropertiesDefault.default(props, [
        "action",
        "avatar",
        "classes",
        "className",
        "component",
        "disableTypography",
        "subheader",
        "subheaderTypographyProps",
        "title",
        "titleTypographyProps"
    ]);
    var title = titleProp;
    if (title != null && title.type !== _typographyDefault.default && !disableTypography) title = /*#__PURE__*/ _react.createElement(_typographyDefault.default, _extendsDefault.default({
        variant: avatar ? 'body2' : 'h5',
        className: classes.title,
        component: "span",
        display: "block"
    }, titleTypographyProps), title);
    var subheader = subheaderProp;
    if (subheader != null && subheader.type !== _typographyDefault.default && !disableTypography) subheader = /*#__PURE__*/ _react.createElement(_typographyDefault.default, _extendsDefault.default({
        variant: avatar ? 'body2' : 'body1',
        className: classes.subheader,
        color: "textSecondary",
        component: "span",
        display: "block"
    }, subheaderTypographyProps), subheader);
    return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other), avatar && /*#__PURE__*/ _react.createElement("div", {
        className: classes.avatar
    }, avatar), /*#__PURE__*/ _react.createElement("div", {
        className: classes.content
    }, title, subheader), action && /*#__PURE__*/ _react.createElement("div", {
        className: classes.action
    }, action)));
});
CardHeader.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The action to display in the card header.
   */ action: _propTypesDefault.default.node,
    /**
   * The Avatar for the Card Header.
   */ avatar: _propTypesDefault.default.node,
    /**
   * @ignore
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .elementType,
    /**
   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
   * This can be useful to render an alternative Typography variant by wrapping
   * the `title` text, and optional `subheader` text
   * with the Typography component.
   */ disableTypography: _propTypesDefault.default.bool,
    /**
   * The content of the component.
   */ subheader: _propTypesDefault.default.node,
    /**
   * These props will be forwarded to the subheader
   * (as long as disableTypography is not `true`).
   */ subheaderTypographyProps: _propTypesDefault.default.object,
    /**
   * The content of the Card Title.
   */ title: _propTypesDefault.default.node,
    /**
   * These props will be forwarded to the title
   * (as long as disableTypography is not `true`).
   */ titleTypographyProps: _propTypesDefault.default.object
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiCardHeader'
})(CardHeader);
