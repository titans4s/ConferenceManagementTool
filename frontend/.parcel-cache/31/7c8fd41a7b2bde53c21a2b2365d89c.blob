var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _jss = require("jss");
var _mergeClasses = require("../mergeClasses");
var _mergeClassesDefault = parcelHelpers.interopDefault(_mergeClasses);
var _multiKeyStore = require("./multiKeyStore");
var _multiKeyStoreDefault = parcelHelpers.interopDefault(_multiKeyStore);
var _useTheme = require("../useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var _stylesProvider = require("../StylesProvider");
var _indexCounter = require("./indexCounter");
var _getStylesCreator = require("../getStylesCreator");
var _getStylesCreatorDefault = parcelHelpers.interopDefault(_getStylesCreator);
var _noopTheme = require("../getStylesCreator/noopTheme");
var _noopThemeDefault = parcelHelpers.interopDefault(_noopTheme);
function getClasses(_ref, classes, Component) {
    var state = _ref.state, stylesOptions = _ref.stylesOptions;
    if (stylesOptions.disableGeneration) return classes || {
    };
    if (!state.cacheClasses) state.cacheClasses = {
        // Cache for the finalized classes value.
        value: null,
        // Cache for the last used classes prop pointer.
        lastProp: null,
        // Cache for the last used rendered classes pointer.
        lastJSS: {
        }
    };
     // Tracks if either the rendered classes or classes prop has changed,
    // requiring the generation of a new finalized classes object.
    var generate = false;
    if (state.classes !== state.cacheClasses.lastJSS) {
        state.cacheClasses.lastJSS = state.classes;
        generate = true;
    }
    if (classes !== state.cacheClasses.lastProp) {
        state.cacheClasses.lastProp = classes;
        generate = true;
    }
    if (generate) state.cacheClasses.value = _mergeClassesDefault.default({
        baseClasses: state.cacheClasses.lastJSS,
        newClasses: classes,
        Component: Component
    });
    return state.cacheClasses.value;
}
function attach(_ref2, props) {
    var state = _ref2.state, theme = _ref2.theme, stylesOptions = _ref2.stylesOptions, stylesCreator = _ref2.stylesCreator, name = _ref2.name;
    if (stylesOptions.disableGeneration) return;
    var sheetManager = _multiKeyStoreDefault.default.get(stylesOptions.sheetsManager, stylesCreator, theme);
    if (!sheetManager) {
        sheetManager = {
            refs: 0,
            staticSheet: null,
            dynamicStyles: null
        };
        _multiKeyStoreDefault.default.set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
    }
    var options = _extendsDefault.default({
    }, stylesCreator.options, stylesOptions, {
        theme: theme,
        flip: typeof stylesOptions.flip === 'boolean' ? stylesOptions.flip : theme.direction === 'rtl'
    });
    options.generateId = options.serverGenerateClassName || options.generateClassName;
    var sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
        var staticSheet;
        if (stylesOptions.sheetsCache) staticSheet = _multiKeyStoreDefault.default.get(stylesOptions.sheetsCache, stylesCreator, theme);
        var styles = stylesCreator.create(theme, name);
        if (!staticSheet) {
            staticSheet = stylesOptions.jss.createStyleSheet(styles, _extendsDefault.default({
                link: false
            }, options));
            staticSheet.attach();
            if (stylesOptions.sheetsCache) _multiKeyStoreDefault.default.set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
        }
        if (sheetsRegistry) sheetsRegistry.add(staticSheet);
        sheetManager.staticSheet = staticSheet;
        sheetManager.dynamicStyles = _jss.getDynamicStyles(styles);
    }
    if (sheetManager.dynamicStyles) {
        var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extendsDefault.default({
            link: true
        }, options));
        dynamicSheet.update(props);
        dynamicSheet.attach();
        state.dynamicSheet = dynamicSheet;
        state.classes = _mergeClassesDefault.default({
            baseClasses: sheetManager.staticSheet.classes,
            newClasses: dynamicSheet.classes
        });
        if (sheetsRegistry) sheetsRegistry.add(dynamicSheet);
    } else state.classes = sheetManager.staticSheet.classes;
    sheetManager.refs += 1;
}
function update(_ref3, props) {
    var state = _ref3.state;
    if (state.dynamicSheet) state.dynamicSheet.update(props);
}
function detach(_ref4) {
    var state = _ref4.state, theme = _ref4.theme, stylesOptions = _ref4.stylesOptions, stylesCreator = _ref4.stylesCreator;
    if (stylesOptions.disableGeneration) return;
    var sheetManager = _multiKeyStoreDefault.default.get(stylesOptions.sheetsManager, stylesCreator, theme);
    sheetManager.refs -= 1;
    var sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
        _multiKeyStoreDefault.default.delete(stylesOptions.sheetsManager, stylesCreator, theme);
        stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);
        if (sheetsRegistry) sheetsRegistry.remove(sheetManager.staticSheet);
    }
    if (state.dynamicSheet) {
        stylesOptions.jss.removeStyleSheet(state.dynamicSheet);
        if (sheetsRegistry) sheetsRegistry.remove(state.dynamicSheet);
    }
}
function useSynchronousEffect(func, values) {
    var key = _reactDefault.default.useRef([]);
    var output; // Store "generation" key. Just returns a new object every time
    var currentKey = _reactDefault.default.useMemo(function() {
        return {
        };
    }, values); // eslint-disable-line react-hooks/exhaustive-deps
    // "the first render", or "memo dropped the value"
    if (key.current !== currentKey) {
        key.current = currentKey;
        output = func();
    }
    _reactDefault.default.useEffect(function() {
        return function() {
            if (output) output();
        };
    }, [
        currentKey
    ]// eslint-disable-line react-hooks/exhaustive-deps
    );
}
function makeStyles(stylesOrCreator) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    };
    var name = options.name, classNamePrefixOption = options.classNamePrefix, Component = options.Component, _options$defaultTheme = options.defaultTheme, defaultTheme = _options$defaultTheme === void 0 ? _noopThemeDefault.default : _options$defaultTheme, stylesOptions2 = _objectWithoutPropertiesDefault.default(options, [
        "name",
        "classNamePrefix",
        "Component",
        "defaultTheme"
    ]);
    var stylesCreator = _getStylesCreatorDefault.default(stylesOrCreator);
    var classNamePrefix = name || classNamePrefixOption || 'makeStyles';
    stylesCreator.options = {
        index: _indexCounter.increment(),
        name: name,
        meta: classNamePrefix,
        classNamePrefix: classNamePrefix
    };
    var useStyles = function useStyles1() {
        var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        };
        var theme = _useThemeDefault.default() || defaultTheme;
        var stylesOptions = _extendsDefault.default({
        }, _reactDefault.default.useContext(_stylesProvider.StylesContext), stylesOptions2);
        var instance = _reactDefault.default.useRef();
        var shouldUpdate = _reactDefault.default.useRef();
        useSynchronousEffect(function() {
            var current = {
                name: name,
                state: {
                },
                stylesCreator: stylesCreator,
                stylesOptions: stylesOptions,
                theme: theme
            };
            attach(current, props);
            shouldUpdate.current = false;
            instance.current = current;
            return function() {
                detach(current);
            };
        }, [
            theme,
            stylesCreator
        ]);
        _reactDefault.default.useEffect(function() {
            if (shouldUpdate.current) update(instance.current, props);
            shouldUpdate.current = true;
        });
        var classes = getClasses(instance.current, props.classes, Component);
        // eslint-disable-next-line react-hooks/rules-of-hooks
        _reactDefault.default.useDebugValue(classes);
        return classes;
    };
    return useStyles;
}
exports.default = makeStyles;
