var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _toArray = require("@babel/runtime/helpers/esm/toArray");
var _toArrayDefault = parcelHelpers.interopDefault(_toArray);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _reactIs = require("react-is");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@material-ui/utils");
var _collapse = require("../Collapse");
var _collapseDefault = parcelHelpers.interopDefault(_collapse);
var _paper = require("../Paper");
var _paperDefault = parcelHelpers.interopDefault(_paper);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _accordionContext = require("./AccordionContext");
var _accordionContextDefault = parcelHelpers.interopDefault(_accordionContext);
var _useControlled = require("../utils/useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var styles = function styles1(theme) {
    var transition = {
        duration: theme.transitions.duration.shortest
    };
    return {
        /* Styles applied to the root element. */ root: {
            position: 'relative',
            transition: theme.transitions.create([
                'margin'
            ], transition),
            '&:before': {
                position: 'absolute',
                left: 0,
                top: -1,
                right: 0,
                height: 1,
                content: '""',
                opacity: 1,
                backgroundColor: theme.palette.divider,
                transition: theme.transitions.create([
                    'opacity',
                    'background-color'
                ], transition)
            },
            '&:first-child': {
                '&:before': {
                    display: 'none'
                }
            },
            '&$expanded': {
                margin: '16px 0',
                '&:first-child': {
                    marginTop: 0
                },
                '&:last-child': {
                    marginBottom: 0
                },
                '&:before': {
                    opacity: 0
                }
            },
            '&$expanded + &': {
                '&:before': {
                    display: 'none'
                }
            },
            '&$disabled': {
                backgroundColor: theme.palette.action.disabledBackground
            }
        },
        /* Styles applied to the root element if `square={false}`. */ rounded: {
            borderRadius: 0,
            '&:first-child': {
                borderTopLeftRadius: theme.shape.borderRadius,
                borderTopRightRadius: theme.shape.borderRadius
            },
            '&:last-child': {
                borderBottomLeftRadius: theme.shape.borderRadius,
                borderBottomRightRadius: theme.shape.borderRadius,
                // Fix a rendering issue on Edge
                '@supports (-ms-ime-align: auto)': {
                    borderBottomLeftRadius: 0,
                    borderBottomRightRadius: 0
                }
            }
        },
        /* Styles applied to the root element if `expanded={true}`. */ expanded: {
        },
        /* Styles applied to the root element if `disabled={true}`. */ disabled: {
        }
    };
};
var Accordion = /*#__PURE__*/ _react.forwardRef(function Accordion1(props, ref) {
    var childrenProp = props.children, classes = props.classes, className = props.className, _props$defaultExpande = props.defaultExpanded, defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, expandedProp = props.expanded, onChange = props.onChange, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _collapseDefault.default : _props$TransitionComp, TransitionProps = props.TransitionProps, other = _objectWithoutPropertiesDefault.default(props, [
        "children",
        "classes",
        "className",
        "defaultExpanded",
        "disabled",
        "expanded",
        "onChange",
        "square",
        "TransitionComponent",
        "TransitionProps"
    ]);
    var _useControlled1 = _useControlledDefault.default({
        controlled: expandedProp,
        default: defaultExpanded,
        name: 'Accordion',
        state: 'expanded'
    }), _useControlled2 = _slicedToArrayDefault.default(_useControlled1, 2), expanded = _useControlled2[0], setExpandedState = _useControlled2[1];
    var handleChange = _react.useCallback(function(event) {
        setExpandedState(!expanded);
        if (onChange) onChange(event, !expanded);
    }, [
        expanded,
        onChange,
        setExpandedState
    ]);
    var _React$Children$toArr = _react.Children.toArray(childrenProp), _React$Children$toArr2 = _toArrayDefault.default(_React$Children$toArr), summary = _React$Children$toArr2[0], children = _React$Children$toArr2.slice(1);
    var contextValue = _react.useMemo(function() {
        return {
            expanded: expanded,
            disabled: disabled,
            toggle: handleChange
        };
    }, [
        expanded,
        disabled,
        handleChange
    ]);
    return(/*#__PURE__*/ _react.createElement(_paperDefault.default, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
        ref: ref,
        square: square
    }, other), /*#__PURE__*/ _react.createElement(_accordionContextDefault.default.Provider, {
        value: contextValue
    }, summary), /*#__PURE__*/ _react.createElement(TransitionComponent, _extendsDefault.default({
        in: expanded,
        timeout: "auto"
    }, TransitionProps), /*#__PURE__*/ _react.createElement("div", {
        "aria-labelledby": summary.props.id,
        id: summary.props['aria-controls'],
        role: "region"
    }, children))));
});
Accordion.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the accordion.
   */ children: _utils.chainPropTypes(_propTypesDefault.default.node.isRequired, function(props) {
        var summary = _react.Children.toArray(props.children)[0];
        if (_reactIs.isFragment(summary)) return new Error("Material-UI: The Accordion doesn't accept a Fragment as a child. Consider providing an array instead.");
        if (!/*#__PURE__*/ _react.isValidElement(summary)) return new Error('Material-UI: Expected the first child of Accordion to be a valid element.');
        return null;
    }),
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * If `true`, expands the accordion by default.
   */ defaultExpanded: _propTypesDefault.default.bool,
    /**
   * If `true`, the accordion will be displayed in a disabled state.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, expands the accordion, otherwise collapse it.
   * Setting this prop enables control over the accordion.
   */ expanded: _propTypesDefault.default.bool,
    /**
   * Callback fired when the expand/collapse state is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {boolean} expanded The `expanded` state of the accordion.
   */ onChange: _propTypesDefault.default.func,
    /**
   * If `true`, rounded corners are disabled.
   */ square: _propTypesDefault.default.bool,
    /**
   * The component used for the collapse effect.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   */ TransitionComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
   */ TransitionProps: _propTypesDefault.default.object
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiAccordion'
})(Accordion);
