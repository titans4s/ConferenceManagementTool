var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _utils = require("@material-ui/utils");
var _useIsFocusVisible = require("../utils/useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _typography = require("../Typography");
var _typographyDefault = parcelHelpers.interopDefault(_typography);
var styles = {
    /* Styles applied to the root element. */ root: {
    },
    /* Styles applied to the root element if `underline="none"`. */ underlineNone: {
        textDecoration: 'none'
    },
    /* Styles applied to the root element if `underline="hover"`. */ underlineHover: {
        textDecoration: 'none',
        '&:hover': {
            textDecoration: 'underline'
        }
    },
    /* Styles applied to the root element if `underline="always"`. */ underlineAlways: {
        textDecoration: 'underline'
    },
    // Same reset as ButtonBase.root
    /* Styles applied to the root element if `component="button"`. */ button: {
        position: 'relative',
        WebkitTapHighlightColor: 'transparent',
        backgroundColor: 'transparent',
        // Reset default value
        // We disable the focus ring for mouse, touch and keyboard users.
        outline: 0,
        border: 0,
        margin: 0,
        // Remove the margin in Safari
        borderRadius: 0,
        padding: 0,
        // Remove the padding in Firefox
        cursor: 'pointer',
        userSelect: 'none',
        verticalAlign: 'middle',
        '-moz-appearance': 'none',
        // Reset
        '-webkit-appearance': 'none',
        // Reset
        '&::-moz-focus-inner': {
            borderStyle: 'none'
        },
        '&$focusVisible': {
            outline: 'auto'
        }
    },
    /* Pseudo-class applied to the root element if the link is keyboard focused. */ focusVisible: {
    }
};
var Link = /*#__PURE__*/ _react.forwardRef(function Link1(props, ref) {
    var classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'primary' : _props$color, _props$component = props.component, component = _props$component === void 0 ? 'a' : _props$component, onBlur = props.onBlur, onFocus = props.onFocus, TypographyClasses = props.TypographyClasses, _props$underline = props.underline, underline = _props$underline === void 0 ? 'hover' : _props$underline, _props$variant = props.variant, variant = _props$variant === void 0 ? 'inherit' : _props$variant, other = _objectWithoutPropertiesDefault.default(props, [
        "classes",
        "className",
        "color",
        "component",
        "onBlur",
        "onFocus",
        "TypographyClasses",
        "underline",
        "variant"
    ]);
    var _useIsFocusVisible1 = _useIsFocusVisibleDefault.default(), isFocusVisible = _useIsFocusVisible1.isFocusVisible, onBlurVisible = _useIsFocusVisible1.onBlurVisible, focusVisibleRef = _useIsFocusVisible1.ref;
    var _React$useState = _react.useState(false), focusVisible = _React$useState[0], setFocusVisible = _React$useState[1];
    var handlerRef = _useForkRefDefault.default(ref, focusVisibleRef);
    var handleBlur = function handleBlur1(event) {
        if (focusVisible) {
            onBlurVisible();
            setFocusVisible(false);
        }
        if (onBlur) onBlur(event);
    };
    var handleFocus = function handleFocus1(event) {
        if (isFocusVisible(event)) setFocusVisible(true);
        if (onFocus) onFocus(event);
    };
    return(/*#__PURE__*/ _react.createElement(_typographyDefault.default, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, classes["underline".concat(_capitalizeDefault.default(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),
        classes: TypographyClasses,
        color: color,
        component: component,
        onBlur: handleBlur,
        onFocus: handleFocus,
        ref: handlerRef,
        variant: variant
    }, other)));
});
Link.propTypes = {
    /**
   * The content of the link.
   */ children: _propTypesDefault.default.node.isRequired,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object.isRequired,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the link.
   */ color: _propTypesDefault.default.oneOf([
        'initial',
        'inherit',
        'primary',
        'secondary',
        'textPrimary',
        'textSecondary',
        'error'
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _utils.elementTypeAcceptingRef,
    /**
   * @ignore
   */ onBlur: _propTypesDefault.default.func,
    /**
   * @ignore
   */ onFocus: _propTypesDefault.default.func,
    /**
   * `classes` prop applied to the [`Typography`](/api/typography/) element.
   */ TypographyClasses: _propTypesDefault.default.object,
    /**
   * Controls when the link should have an underline.
   */ underline: _propTypesDefault.default.oneOf([
        'none',
        'hover',
        'always'
    ]),
    /**
   * Applies the theme typography styles.
   */ variant: _propTypesDefault.default.string
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiLink'
})(Link);
