var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
var styles = function styles1(theme) {
    var hidden = {
        display: 'none'
    };
    return theme.breakpoints.keys.reduce(function(acc, key) {
        acc["only".concat(_capitalizeDefault.default(key))] = _definePropertyDefault.default({
        }, theme.breakpoints.only(key), hidden);
        acc["".concat(key, "Up")] = _definePropertyDefault.default({
        }, theme.breakpoints.up(key), hidden);
        acc["".concat(key, "Down")] = _definePropertyDefault.default({
        }, theme.breakpoints.down(key), hidden);
        return acc;
    }, {
    });
};
/**
 * @ignore - internal component.
 */ function HiddenCss(props) {
    var children = props.children, classes = props.classes, className = props.className, only = props.only, other = _objectWithoutPropertiesDefault.default(props, [
        "children",
        "classes",
        "className",
        "only"
    ]);
    var theme = _useThemeDefault.default();
    var unknownProps = Object.keys(other).filter(function(propName) {
        var isUndeclaredBreakpoint = !theme.breakpoints.keys.some(function(breakpoint) {
            return "".concat(breakpoint, "Up") === propName || "".concat(breakpoint, "Down") === propName;
        });
        return isUndeclaredBreakpoint;
    });
    if (unknownProps.length > 0) console.error("Material-UI: Unsupported props received by `<Hidden implementation=\"css\" />`: ".concat(unknownProps.join(', '), ". Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?"));
    var clsx = [];
    if (className) clsx.push(className);
    for(var i = 0; i < theme.breakpoints.keys.length; i += 1){
        var breakpoint = theme.breakpoints.keys[i];
        var breakpointUp = props["".concat(breakpoint, "Up")];
        var breakpointDown = props["".concat(breakpoint, "Down")];
        if (breakpointUp) clsx.push(classes["".concat(breakpoint, "Up")]);
        if (breakpointDown) clsx.push(classes["".concat(breakpoint, "Down")]);
    }
    if (only) {
        var onlyBreakpoints = Array.isArray(only) ? only : [
            only
        ];
        onlyBreakpoints.forEach(function(breakpoint) {
            clsx.push(classes["only".concat(_capitalizeDefault.default(breakpoint))]);
        });
    }
    return(/*#__PURE__*/ _react.createElement("div", {
        className: clsx.join(' ')
    }, children));
}
HiddenCss.propTypes = {
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object.isRequired,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */ implementation: _propTypesDefault.default.oneOf([
        'js',
        'css'
    ]),
    /**
   * If `true`, screens this size and down will be hidden.
   */ lgDown: _propTypesDefault.default.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ lgUp: _propTypesDefault.default.bool,
    /**
   * If `true`, screens this size and down will be hidden.
   */ mdDown: _propTypesDefault.default.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ mdUp: _propTypesDefault.default.bool,
    /**
   * Hide the given breakpoint(s).
   */ only: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.oneOf([
            'xs',
            'sm',
            'md',
            'lg',
            'xl'
        ]),
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.oneOf([
            'xs',
            'sm',
            'md',
            'lg',
            'xl'
        ]))
    ]),
    /**
   * If `true`, screens this size and down will be hidden.
   */ smDown: _propTypesDefault.default.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ smUp: _propTypesDefault.default.bool,
    /**
   * If `true`, screens this size and down will be hidden.
   */ xlDown: _propTypesDefault.default.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ xlUp: _propTypesDefault.default.bool,
    /**
   * If `true`, screens this size and down will be hidden.
   */ xsDown: _propTypesDefault.default.bool,
    /**
   * If `true`, screens this size and up will be hidden.
   */ xsUp: _propTypesDefault.default.bool
};
exports.default = _withStylesDefault.default(styles, {
    name: 'PrivateHiddenCss'
})(HiddenCss);
