var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@material-ui/utils");
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var styles = function styles1(theme) {
    var elevations = {
    };
    theme.shadows.forEach(function(shadow, index) {
        elevations["elevation".concat(index)] = {
            boxShadow: shadow
        };
    });
    return _extendsDefault.default({
        /* Styles applied to the root element. */ root: {
            backgroundColor: theme.palette.background.paper,
            color: theme.palette.text.primary,
            transition: theme.transitions.create('box-shadow')
        },
        /* Styles applied to the root element if `square={false}`. */ rounded: {
            borderRadius: theme.shape.borderRadius
        },
        /* Styles applied to the root element if `variant="outlined"`. */ outlined: {
            border: "1px solid ".concat(theme.palette.divider)
        }
    }, elevations);
};
var Paper = /*#__PURE__*/ _react.forwardRef(function Paper1(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$square = props.square, square = _props$square === void 0 ? false : _props$square, _props$elevation = props.elevation, elevation = _props$elevation === void 0 ? 1 : _props$elevation, _props$variant = props.variant, variant = _props$variant === void 0 ? 'elevation' : _props$variant, other = _objectWithoutPropertiesDefault.default(props, [
        "classes",
        "className",
        "component",
        "square",
        "elevation",
        "variant"
    ]);
    return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className, variant === 'outlined' ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
        ref: ref
    }, other)));
});
Paper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .elementType,
    /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   */ elevation: _utils.chainPropTypes(_propTypesDefault.default.number, function(props) {
        var classes = props.classes, elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning
        if (classes === undefined) return null;
        if (elevation != null && classes["elevation".concat(elevation)] === undefined) return new Error("Material-UI: This elevation `".concat(elevation, "` is not implemented."));
        return null;
    }),
    /**
   * If `true`, rounded corners are disabled.
   */ square: _propTypesDefault.default.bool,
    /**
   * The variant to use.
   */ variant: _propTypesDefault.default.oneOf([
        'elevation',
        'outlined'
    ])
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiPaper'
})(Paper);
