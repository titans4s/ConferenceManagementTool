var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "html", ()=>html
);
parcelHelpers.export(exports, "body", ()=>body
);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _utils = require("@material-ui/utils");
var html = {
    WebkitFontSmoothing: 'antialiased',
    // Antialiasing.
    MozOsxFontSmoothing: 'grayscale',
    // Antialiasing.
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: 'border-box'
};
var body = function body1(theme) {
    return _extendsDefault.default({
        color: theme.palette.text.primary
    }, theme.typography.body2, {
        backgroundColor: theme.palette.background.default,
        '@media print': {
            // Save printer ink.
            backgroundColor: theme.palette.common.white
        }
    });
};
var styles = function styles1(theme) {
    return {
        '@global': {
            html: html,
            '*, *::before, *::after': {
                boxSizing: 'inherit'
            },
            'strong, b': {
                fontWeight: theme.typography.fontWeightBold
            },
            body: _extendsDefault.default({
                margin: 0
            }, body(theme), {
                // Add support for document.body.requestFullScreen().
                // Other elements, if background transparent, are not supported.
                '&::backdrop': {
                    backgroundColor: theme.palette.background.default
                }
            })
        }
    };
};
/**
 * Kickstart an elegant, consistent, and simple baseline to build upon.
 */ function CssBaseline(props) {
    /* eslint-disable no-unused-vars */ var _props$children = props.children, children = _props$children === void 0 ? null : _props$children, classes = props.classes;
    /* eslint-enable no-unused-vars */ return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, children));
}
CssBaseline.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * You can wrap a node.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object
};
// eslint-disable-next-line
CssBaseline['propTypes' + ''] = _utils.exactProp(CssBaseline.propTypes);
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiCssBaseline'
})(CssBaseline);
