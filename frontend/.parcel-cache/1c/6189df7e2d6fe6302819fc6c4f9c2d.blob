var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _formGroup = require("../FormGroup");
var _formGroupDefault = parcelHelpers.interopDefault(_formGroup);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _useControlled = require("../utils/useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _radioGroupContext = require("./RadioGroupContext");
var _radioGroupContextDefault = parcelHelpers.interopDefault(_radioGroupContext);
var _unstableUseId = require("../utils/unstable_useId");
var _unstableUseIdDefault = parcelHelpers.interopDefault(_unstableUseId);
var RadioGroup = /*#__PURE__*/ _react.forwardRef(function RadioGroup1(props, ref) {
    var actions = props.actions, children = props.children, nameProp = props.name, valueProp = props.value, onChange = props.onChange, other = _objectWithoutPropertiesDefault.default(props, [
        "actions",
        "children",
        "name",
        "value",
        "onChange"
    ]);
    var rootRef = _react.useRef(null);
    var _useControlled1 = _useControlledDefault.default({
        controlled: valueProp,
        default: props.defaultValue,
        name: 'RadioGroup'
    }), _useControlled2 = _slicedToArrayDefault.default(_useControlled1, 2), value = _useControlled2[0], setValue = _useControlled2[1];
    _react.useImperativeHandle(actions, function() {
        return {
            focus: function focus() {
                var input = rootRef.current.querySelector('input:not(:disabled):checked');
                if (!input) input = rootRef.current.querySelector('input:not(:disabled)');
                if (input) input.focus();
            }
        };
    }, []);
    var handleRef = _useForkRefDefault.default(ref, rootRef);
    var handleChange = function handleChange1(event) {
        setValue(event.target.value);
        if (onChange) onChange(event, event.target.value);
    };
    var name = _unstableUseIdDefault.default(nameProp);
    return(/*#__PURE__*/ _react.createElement(_radioGroupContextDefault.default.Provider, {
        value: {
            name: name,
            onChange: handleChange,
            value: value
        }
    }, /*#__PURE__*/ _react.createElement(_formGroupDefault.default, _extendsDefault.default({
        role: "radiogroup",
        ref: handleRef
    }, other), children)));
});
RadioGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * The default `input` element value. Use when the component is not controlled.
   */ defaultValue: _propTypesDefault.default.oneOfType([
        _propTypesDefault.default.arrayOf(_propTypesDefault.default.string),
        _propTypesDefault.default.number,
        _propTypesDefault.default.string
    ]),
    /**
   * The name used to reference the value of the control.
   * If you don't provide this prop, it falls back to a randomly generated name.
   */ name: _propTypesDefault.default.string,
    /**
   * Callback fired when a radio button is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */ onChange: _propTypesDefault.default.func,
    /**
   * Value of the selected radio button. The DOM API casts this to a string.
   */ value: _propTypesDefault.default.any
};
exports.default = RadioGroup;
