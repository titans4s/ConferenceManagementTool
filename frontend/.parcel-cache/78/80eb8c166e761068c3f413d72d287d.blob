var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _reactIs = require("react-is");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _colorManipulator = require("../styles/colorManipulator");
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _button = require("../Button"); // Force a side effect so we don't have any override priority issue.
var _buttonDefault = parcelHelpers.interopDefault(_button);
// eslint-disable-next-line no-unused-expressions
_buttonDefault.default.styles;
var styles = function styles1(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            display: 'inline-flex',
            borderRadius: theme.shape.borderRadius
        },
        /* Styles applied to the root element if `variant="contained"`. */ contained: {
            boxShadow: theme.shadows[2]
        },
        /* Styles applied to the root element if `disableElevation={true}`. */ disableElevation: {
            boxShadow: 'none'
        },
        /* Pseudo-class applied to child elements if `disabled={true}`. */ disabled: {
        },
        /* Styles applied to the root element if `fullWidth={true}`. */ fullWidth: {
            width: '100%'
        },
        /* Styles applied to the root element if `orientation="vertical"`. */ vertical: {
            flexDirection: 'column'
        },
        /* Styles applied to the children. */ grouped: {
            minWidth: 40
        },
        /* Styles applied to the children if `orientation="horizontal"`. */ groupedHorizontal: {
            '&:not(:first-child)': {
                borderTopLeftRadius: 0,
                borderBottomLeftRadius: 0
            },
            '&:not(:last-child)': {
                borderTopRightRadius: 0,
                borderBottomRightRadius: 0
            }
        },
        /* Styles applied to the children if `orientation="vertical"`. */ groupedVertical: {
            '&:not(:first-child)': {
                borderTopRightRadius: 0,
                borderTopLeftRadius: 0
            },
            '&:not(:last-child)': {
                borderBottomRightRadius: 0,
                borderBottomLeftRadius: 0
            }
        },
        /* Styles applied to the children if `variant="text"`. */ groupedText: {
        },
        /* Styles applied to the children if `variant="text"` and `orientation="horizontal"`. */ groupedTextHorizontal: {
            '&:not(:last-child)': {
                borderRight: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')
            }
        },
        /* Styles applied to the children if `variant="text"` and `orientation="vertical"`. */ groupedTextVertical: {
            '&:not(:last-child)': {
                borderBottom: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')
            }
        },
        /* Styles applied to the children if `variant="text"` and `color="primary"`. */ groupedTextPrimary: {
            '&:not(:last-child)': {
                borderColor: _colorManipulator.fade(theme.palette.primary.main, 0.5)
            }
        },
        /* Styles applied to the children if `variant="text"` and `color="secondary"`. */ groupedTextSecondary: {
            '&:not(:last-child)': {
                borderColor: _colorManipulator.fade(theme.palette.secondary.main, 0.5)
            }
        },
        /* Styles applied to the children if `variant="outlined"`. */ groupedOutlined: {
        },
        /* Styles applied to the children if `variant="outlined"` and `orientation="horizontal"`. */ groupedOutlinedHorizontal: {
            '&:not(:first-child)': {
                marginLeft: -1
            },
            '&:not(:last-child)': {
                borderRightColor: 'transparent'
            }
        },
        /* Styles applied to the children if `variant="outlined"` and `orientation="vertical"`. */ groupedOutlinedVertical: {
            '&:not(:first-child)': {
                marginTop: -1
            },
            '&:not(:last-child)': {
                borderBottomColor: 'transparent'
            }
        },
        /* Styles applied to the children if `variant="outlined"` and `color="primary"`. */ groupedOutlinedPrimary: {
            '&:hover': {
                borderColor: theme.palette.primary.main
            }
        },
        /* Styles applied to the children if `variant="outlined"` and `color="secondary"`. */ groupedOutlinedSecondary: {
            '&:hover': {
                borderColor: theme.palette.secondary.main
            }
        },
        /* Styles applied to the children if `variant="contained"`. */ groupedContained: {
            boxShadow: 'none'
        },
        /* Styles applied to the children if `variant="contained"` and `orientation="horizontal"`. */ groupedContainedHorizontal: {
            '&:not(:last-child)': {
                borderRight: "1px solid ".concat(theme.palette.grey[400]),
                '&$disabled': {
                    borderRight: "1px solid ".concat(theme.palette.action.disabled)
                }
            }
        },
        /* Styles applied to the children if `variant="contained"` and `orientation="vertical"`. */ groupedContainedVertical: {
            '&:not(:last-child)': {
                borderBottom: "1px solid ".concat(theme.palette.grey[400]),
                '&$disabled': {
                    borderBottom: "1px solid ".concat(theme.palette.action.disabled)
                }
            }
        },
        /* Styles applied to the children if `variant="contained"` and `color="primary"`. */ groupedContainedPrimary: {
            '&:not(:last-child)': {
                borderColor: theme.palette.primary.dark
            }
        },
        /* Styles applied to the children if `variant="contained"` and `color="secondary"`. */ groupedContainedSecondary: {
            '&:not(:last-child)': {
                borderColor: theme.palette.secondary.dark
            }
        }
    };
};
var ButtonGroup = /*#__PURE__*/ _react.forwardRef(function ButtonGroup1(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$color = props.color, color = _props$color === void 0 ? 'default' : _props$color, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableElevati = props.disableElevation, disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, _props$disableRipple = props.disableRipple, disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple, _props$fullWidth = props.fullWidth, fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth, _props$orientation = props.orientation, orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation, _props$size = props.size, size = _props$size === void 0 ? 'medium' : _props$size, _props$variant = props.variant, variant = _props$variant === void 0 ? 'outlined' : _props$variant, other = _objectWithoutPropertiesDefault.default(props, [
        "children",
        "classes",
        "className",
        "color",
        "component",
        "disabled",
        "disableElevation",
        "disableFocusRipple",
        "disableRipple",
        "fullWidth",
        "orientation",
        "size",
        "variant"
    ]);
    var buttonClassName = _clsxDefault.default(classes.grouped, classes["grouped".concat(_capitalizeDefault.default(orientation))], classes["grouped".concat(_capitalizeDefault.default(variant))], classes["grouped".concat(_capitalizeDefault.default(variant)).concat(_capitalizeDefault.default(orientation))], classes["grouped".concat(_capitalizeDefault.default(variant)).concat(color !== 'default' ? _capitalizeDefault.default(color) : '')], disabled && classes.disabled);
    return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        role: "group",
        className: _clsxDefault.default(classes.root, className, fullWidth && classes.fullWidth, disableElevation && classes.disableElevation, variant === 'contained' && classes.contained, orientation === 'vertical' && classes.vertical),
        ref: ref
    }, other), _react.Children.map(children, function(child) {
        if (!/*#__PURE__*/ _react.isValidElement(child)) return null;
        if (_reactIs.isFragment(child)) console.error([
            "Material-UI: The ButtonGroup component doesn't accept a Fragment as a child.",
            'Consider providing an array instead.'
        ].join('\n'));
        return(/*#__PURE__*/ _react.cloneElement(child, {
            className: _clsxDefault.default(buttonClassName, child.props.className),
            color: child.props.color || color,
            disabled: child.props.disabled || disabled,
            disableElevation: child.props.disableElevation || disableElevation,
            disableFocusRipple: disableFocusRipple,
            disableRipple: disableRipple,
            fullWidth: fullWidth,
            size: child.props.size || size,
            variant: child.props.variant || variant
        }));
    })));
});
ButtonGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the button group.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The color of the component. It supports those theme colors that make sense for this component.
   */ color: _propTypesDefault.default.oneOf([
        'default',
        'inherit',
        'primary',
        'secondary'
    ]),
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .elementType,
    /**
   * If `true`, the buttons will be disabled.
   */ disabled: _propTypesDefault.default.bool,
    /**
   * If `true`, no elevation is used.
   */ disableElevation: _propTypesDefault.default.bool,
    /**
   * If `true`, the button keyboard focus ripple will be disabled.
   */ disableFocusRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the button ripple effect will be disabled.
   */ disableRipple: _propTypesDefault.default.bool,
    /**
   * If `true`, the buttons will take up the full width of its container.
   */ fullWidth: _propTypesDefault.default.bool,
    /**
   * The group orientation (layout flow direction).
   */ orientation: _propTypesDefault.default.oneOf([
        'horizontal',
        'vertical'
    ]),
    /**
   * The size of the button.
   * `small` is equivalent to the dense button styling.
   */ size: _propTypesDefault.default.oneOf([
        'large',
        'medium',
        'small'
    ]),
    /**
   * The variant to use.
   */ variant: _propTypesDefault.default.oneOf([
        'contained',
        'outlined',
        'text'
    ])
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiButtonGroup'
})(ButtonGroup);
