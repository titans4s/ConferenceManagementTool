var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _react = require("react");
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var styles = function styles1(theme) {
    return {
        thumb: {
            '&$open': {
                '& $offset': {
                    transform: 'scale(1) translateY(-10px)'
                }
            }
        },
        open: {
        },
        offset: _extendsDefault.default({
            zIndex: 1
        }, theme.typography.body2, {
            fontSize: theme.typography.pxToRem(12),
            lineHeight: 1.2,
            transition: theme.transitions.create([
                'transform'
            ], {
                duration: theme.transitions.duration.shortest
            }),
            top: -34,
            transformOrigin: 'bottom center',
            transform: 'scale(0)',
            position: 'absolute'
        }),
        circle: {
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: 32,
            height: 32,
            borderRadius: '50% 50% 50% 0',
            backgroundColor: 'currentColor',
            transform: 'rotate(-45deg)'
        },
        label: {
            color: theme.palette.primary.contrastText,
            transform: 'rotate(45deg)'
        }
    };
};
/**
 * @ignore - internal component.
 */ function ValueLabel(props) {
    var children = props.children, classes = props.classes, className = props.className, open = props.open, value = props.value, valueLabelDisplay = props.valueLabelDisplay;
    if (valueLabelDisplay === 'off') return children;
    return(/*#__PURE__*/ _react.cloneElement(children, {
        className: _clsxDefault.default(children.props.className, (open || valueLabelDisplay === 'on') && classes.open, classes.thumb)
    }, /*#__PURE__*/ _react.createElement("span", {
        className: _clsxDefault.default(classes.offset, className)
    }, /*#__PURE__*/ _react.createElement("span", {
        className: classes.circle
    }, /*#__PURE__*/ _react.createElement("span", {
        className: classes.label
    }, value)))));
}
exports.default = _withStylesDefault.default(styles, {
    name: 'PrivateValueLabel'
})(ValueLabel);
