var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _reactIs = require("react-is");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var styles = function styles1(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            display: 'flex',
            justifyContent: 'center',
            height: 56,
            backgroundColor: theme.palette.background.paper
        }
    };
};
var BottomNavigation = /*#__PURE__*/ _react.forwardRef(function BottomNavigation1(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, onChange = props.onChange, _props$showLabels = props.showLabels, showLabels = _props$showLabels === void 0 ? false : _props$showLabels, value = props.value, other = _objectWithoutPropertiesDefault.default(props, [
        "children",
        "classes",
        "className",
        "component",
        "onChange",
        "showLabels",
        "value"
    ]);
    return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className),
        ref: ref
    }, other), _react.Children.map(children, function(child, childIndex) {
        if (!/*#__PURE__*/ _react.isValidElement(child)) return null;
        if (_reactIs.isFragment(child)) console.error([
            "Material-UI: The BottomNavigation component doesn't accept a Fragment as a child.",
            'Consider providing an array instead.'
        ].join('\n'));
        var childValue = child.props.value === undefined ? childIndex : child.props.value;
        return(/*#__PURE__*/ _react.cloneElement(child, {
            selected: childValue === value,
            showLabel: child.props.showLabel !== undefined ? child.props.showLabel : showLabels,
            value: childValue,
            onChange: onChange
        }));
    })));
});
BottomNavigation.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .elementType,
    /**
   * Callback fired when the value changes.
   *
   * @param {object} event The event source of the callback.
   * @param {any} value We default to the index of the child.
   */ onChange: _propTypesDefault.default.func,
    /**
   * If `true`, all `BottomNavigationAction`s will show their labels.
   * By default, only the selected `BottomNavigationAction` will show its label.
   */ showLabels: _propTypesDefault.default.bool,
    /**
   * The value of the currently selected `BottomNavigationAction`.
   */ value: _propTypesDefault.default.any
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiBottomNavigation'
})(BottomNavigation);
