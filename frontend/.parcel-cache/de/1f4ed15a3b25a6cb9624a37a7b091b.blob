var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _utils = require("@material-ui/utils");
var styles = {
    /* Styles applied to the root element. */ root: {
        display: 'block',
        backgroundSize: 'cover',
        backgroundRepeat: 'no-repeat',
        backgroundPosition: 'center'
    },
    /* Styles applied to the root element if `component="video, audio, picture, iframe, or img"`. */ media: {
        width: '100%'
    },
    /* Styles applied to the root element if `component="picture or img"`. */ img: {
        // ⚠️ object-fit is not supported by IE 11.
        objectFit: 'cover'
    }
};
var MEDIA_COMPONENTS = [
    'video',
    'audio',
    'picture',
    'iframe',
    'img'
];
var CardMedia = /*#__PURE__*/ _react.forwardRef(function CardMedia1(props, ref) {
    var children = props.children, classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? 'div' : _props$component, image = props.image, src = props.src, style = props.style, other = _objectWithoutPropertiesDefault.default(props, [
        "children",
        "classes",
        "className",
        "component",
        "image",
        "src",
        "style"
    ]);
    var isMediaComponent = MEDIA_COMPONENTS.indexOf(Component) !== -1;
    var composedStyle = !isMediaComponent && image ? _extendsDefault.default({
        backgroundImage: "url(\"".concat(image, "\")")
    }, style) : style;
    return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        className: _clsxDefault.default(classes.root, className, isMediaComponent && classes.media, "picture img".indexOf(Component) !== -1 && classes.img),
        ref: ref,
        style: composedStyle,
        src: isMediaComponent ? image || src : undefined
    }, other), children));
});
CardMedia.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * The content of the component.
   */ children: _utils.chainPropTypes(_propTypesDefault.default.node, function(props) {
        if (!props.children && !props.image && !props.src && !props.component) return new Error('Material-UI: Either `children`, `image`, `src` or `component` prop must be specified.');
        return null;
    }),
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .elementType,
    /**
   * Image to be displayed as a background image.
   * Either `image` or `src` prop must be specified.
   * Note that caller must specify height otherwise the image will not be visible.
   */ image: _propTypesDefault.default.string,
    /**
   * An alias for `image` property.
   * Available only with media components.
   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
   */ src: _propTypesDefault.default.string,
    /**
   * @ignore
   */ style: _propTypesDefault.default.object
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiCardMedia'
})(CardMedia);
