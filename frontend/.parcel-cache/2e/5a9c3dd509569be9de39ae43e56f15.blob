var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _react = require("react");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _tablelvl2Context = require("../Table/Tablelvl2Context");
var _tablelvl2ContextDefault = parcelHelpers.interopDefault(_tablelvl2Context);
var _colorManipulator = require("../styles/colorManipulator");
var styles = function styles1(theme) {
    return {
        /* Styles applied to the root element. */ root: {
            color: 'inherit',
            display: 'table-row',
            verticalAlign: 'middle',
            // We disable the focus ring for mouse, touch and keyboard users.
            outline: 0,
            '&$hover:hover': {
                backgroundColor: theme.palette.action.hover
            },
            '&$selected, &$selected:hover': {
                backgroundColor: _colorManipulator.fade(theme.palette.secondary.main, theme.palette.action.selectedOpacity)
            }
        },
        /* Pseudo-class applied to the root element if `selected={true}`. */ selected: {
        },
        /* Pseudo-class applied to the root element if `hover={true}`. */ hover: {
        },
        /* Styles applied to the root element if table variant="head". */ head: {
        },
        /* Styles applied to the root element if table variant="footer". */ footer: {
        }
    };
};
var defaultComponent = 'tr';
/**
 * Will automatically set dynamic row height
 * based on the material table element parent (head, body, etc).
 */ var TableRow = /*#__PURE__*/ _react.forwardRef(function TableRow1(props, ref) {
    var classes = props.classes, className = props.className, _props$component = props.component, Component = _props$component === void 0 ? defaultComponent : _props$component, _props$hover = props.hover, hover = _props$hover === void 0 ? false : _props$hover, _props$selected = props.selected, selected = _props$selected === void 0 ? false : _props$selected, other = _objectWithoutPropertiesDefault.default(props, [
        "classes",
        "className",
        "component",
        "hover",
        "selected"
    ]);
    var tablelvl2 = _react.useContext(_tablelvl2ContextDefault.default);
    return(/*#__PURE__*/ _react.createElement(Component, _extendsDefault.default({
        ref: ref,
        className: _clsxDefault.default(classes.root, className, tablelvl2 && {
            'head': classes.head,
            'footer': classes.footer
        }[tablelvl2.variant], hover && classes.hover, selected && classes.selected),
        role: Component === defaultComponent ? null : 'row'
    }, other)));
});
TableRow.propTypes = {
    /**
   * Should be valid <tr> children such as `TableCell`.
   */ children: _propTypesDefault.default.node,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object.isRequired,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */ component: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .elementType,
    /**
   * If `true`, the table row will shade on hover.
   */ hover: _propTypesDefault.default.bool,
    /**
   * If `true`, the table row will have the selected shading.
   */ selected: _propTypesDefault.default.bool
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiTableRow'
})(TableRow);
