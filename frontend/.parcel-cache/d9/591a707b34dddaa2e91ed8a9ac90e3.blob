var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "styles", ()=>styles
);
parcelHelpers.export(exports, "testReset", ()=>testReset
);
var _extends = require("@babel/runtime/helpers/esm/extends");
var _extendsDefault = parcelHelpers.interopDefault(_extends);
var _slicedToArray = require("@babel/runtime/helpers/esm/slicedToArray");
var _slicedToArrayDefault = parcelHelpers.interopDefault(_slicedToArray);
var _objectWithoutProperties = require("@babel/runtime/helpers/esm/objectWithoutProperties");
var _objectWithoutPropertiesDefault = parcelHelpers.interopDefault(_objectWithoutProperties);
var _defineProperty = require("@babel/runtime/helpers/esm/defineProperty");
var _definePropertyDefault = parcelHelpers.interopDefault(_defineProperty);
var _react = require("react");
var _reactDom = require("react-dom");
var _propTypes = require("prop-types");
var _propTypesDefault = parcelHelpers.interopDefault(_propTypes);
var _clsx = require("clsx");
var _clsxDefault = parcelHelpers.interopDefault(_clsx);
var _utils = require("@material-ui/utils");
var _colorManipulator = require("../styles/colorManipulator");
var _withStyles = require("../styles/withStyles");
var _withStylesDefault = parcelHelpers.interopDefault(_withStyles);
var _capitalize = require("../utils/capitalize");
var _capitalizeDefault = parcelHelpers.interopDefault(_capitalize);
var _grow = require("../Grow");
var _growDefault = parcelHelpers.interopDefault(_grow);
var _popper = require("../Popper");
var _popperDefault = parcelHelpers.interopDefault(_popper);
var _useForkRef = require("../utils/useForkRef");
var _useForkRefDefault = parcelHelpers.interopDefault(_useForkRef);
var _unstableUseId = require("../utils/unstable_useId");
var _unstableUseIdDefault = parcelHelpers.interopDefault(_unstableUseId);
var _setRef = require("../utils/setRef");
var _setRefDefault = parcelHelpers.interopDefault(_setRef);
var _useIsFocusVisible = require("../utils/useIsFocusVisible");
var _useIsFocusVisibleDefault = parcelHelpers.interopDefault(_useIsFocusVisible);
var _useControlled = require("../utils/useControlled");
var _useControlledDefault = parcelHelpers.interopDefault(_useControlled);
var _useTheme = require("../styles/useTheme");
var _useThemeDefault = parcelHelpers.interopDefault(_useTheme);
function round(value) {
    return Math.round(value * 100000) / 100000;
}
function arrowGenerator() {
    return {
        '&[x-placement*="bottom"] $arrow': {
            top: 0,
            left: 0,
            marginTop: '-0.71em',
            marginLeft: 4,
            marginRight: 4,
            '&::before': {
                transformOrigin: '0 100%'
            }
        },
        '&[x-placement*="top"] $arrow': {
            bottom: 0,
            left: 0,
            marginBottom: '-0.71em',
            marginLeft: 4,
            marginRight: 4,
            '&::before': {
                transformOrigin: '100% 0'
            }
        },
        '&[x-placement*="right"] $arrow': {
            left: 0,
            marginLeft: '-0.71em',
            height: '1em',
            width: '0.71em',
            marginTop: 4,
            marginBottom: 4,
            '&::before': {
                transformOrigin: '100% 100%'
            }
        },
        '&[x-placement*="left"] $arrow': {
            right: 0,
            marginRight: '-0.71em',
            height: '1em',
            width: '0.71em',
            marginTop: 4,
            marginBottom: 4,
            '&::before': {
                transformOrigin: '0 0'
            }
        }
    };
}
var styles = function styles1(theme) {
    return {
        /* Styles applied to the Popper component. */ popper: {
            zIndex: theme.zIndex.tooltip,
            pointerEvents: 'none'
        },
        /* Styles applied to the Popper component if `interactive={true}`. */ popperInteractive: {
            pointerEvents: 'auto'
        },
        /* Styles applied to the Popper component if `arrow={true}`. */ popperArrow: arrowGenerator(),
        /* Styles applied to the tooltip (label wrapper) element. */ tooltip: {
            backgroundColor: _colorManipulator.fade(theme.palette.grey[700], 0.9),
            borderRadius: theme.shape.borderRadius,
            color: theme.palette.common.white,
            fontFamily: theme.typography.fontFamily,
            padding: '4px 8px',
            fontSize: theme.typography.pxToRem(10),
            lineHeight: "".concat(round(1.4), "em"),
            maxWidth: 300,
            wordWrap: 'break-word',
            fontWeight: theme.typography.fontWeightMedium
        },
        /* Styles applied to the tooltip (label wrapper) element if `arrow={true}`. */ tooltipArrow: {
            position: 'relative',
            margin: '0'
        },
        /* Styles applied to the arrow element. */ arrow: {
            overflow: 'hidden',
            position: 'absolute',
            width: '1em',
            height: '0.71em',
            boxSizing: 'border-box',
            color: _colorManipulator.fade(theme.palette.grey[700], 0.9),
            '&::before': {
                content: '""',
                margin: 'auto',
                display: 'block',
                width: '100%',
                height: '100%',
                backgroundColor: 'currentColor',
                transform: 'rotate(45deg)'
            }
        },
        /* Styles applied to the tooltip (label wrapper) element if the tooltip is opened by touch. */ touch: {
            padding: '8px 16px',
            fontSize: theme.typography.pxToRem(14),
            lineHeight: "".concat(round(16 / 14), "em"),
            fontWeight: theme.typography.fontWeightRegular
        },
        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "left". */ tooltipPlacementLeft: _definePropertyDefault.default({
            transformOrigin: 'right center',
            margin: '0 24px '
        }, theme.breakpoints.up('sm'), {
            margin: '0 14px'
        }),
        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "right". */ tooltipPlacementRight: _definePropertyDefault.default({
            transformOrigin: 'left center',
            margin: '0 24px'
        }, theme.breakpoints.up('sm'), {
            margin: '0 14px'
        }),
        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "top". */ tooltipPlacementTop: _definePropertyDefault.default({
            transformOrigin: 'center bottom',
            margin: '24px 0'
        }, theme.breakpoints.up('sm'), {
            margin: '14px 0'
        }),
        /* Styles applied to the tooltip (label wrapper) element if `placement` contains "bottom". */ tooltipPlacementBottom: _definePropertyDefault.default({
            transformOrigin: 'center top',
            margin: '24px 0'
        }, theme.breakpoints.up('sm'), {
            margin: '14px 0'
        })
    };
};
var hystersisOpen = false;
var hystersisTimer = null;
function testReset() {
    hystersisOpen = false;
    clearTimeout(hystersisTimer);
}
var Tooltip = /*#__PURE__*/ _react.forwardRef(function Tooltip1(props, ref) {
    var _props$arrow = props.arrow, arrow = _props$arrow === void 0 ? false : _props$arrow, children = props.children, classes = props.classes, _props$disableFocusLi = props.disableFocusListener, disableFocusListener = _props$disableFocusLi === void 0 ? false : _props$disableFocusLi, _props$disableHoverLi = props.disableHoverListener, disableHoverListener = _props$disableHoverLi === void 0 ? false : _props$disableHoverLi, _props$disableTouchLi = props.disableTouchListener, disableTouchListener = _props$disableTouchLi === void 0 ? false : _props$disableTouchLi, _props$enterDelay = props.enterDelay, enterDelay = _props$enterDelay === void 0 ? 100 : _props$enterDelay, _props$enterNextDelay = props.enterNextDelay, enterNextDelay = _props$enterNextDelay === void 0 ? 0 : _props$enterNextDelay, _props$enterTouchDela = props.enterTouchDelay, enterTouchDelay = _props$enterTouchDela === void 0 ? 700 : _props$enterTouchDela, idProp = props.id, _props$interactive = props.interactive, interactive = _props$interactive === void 0 ? false : _props$interactive, _props$leaveDelay = props.leaveDelay, leaveDelay = _props$leaveDelay === void 0 ? 0 : _props$leaveDelay, _props$leaveTouchDela = props.leaveTouchDelay, leaveTouchDelay = _props$leaveTouchDela === void 0 ? 1500 : _props$leaveTouchDela, onClose = props.onClose, onOpen = props.onOpen, openProp = props.open, _props$placement = props.placement, placement = _props$placement === void 0 ? 'bottom' : _props$placement, _props$PopperComponen = props.PopperComponent, PopperComponent = _props$PopperComponen === void 0 ? _popperDefault.default : _props$PopperComponen, PopperProps = props.PopperProps, title = props.title, _props$TransitionComp = props.TransitionComponent, TransitionComponent = _props$TransitionComp === void 0 ? _growDefault.default : _props$TransitionComp, TransitionProps = props.TransitionProps, other = _objectWithoutPropertiesDefault.default(props, [
        "arrow",
        "children",
        "classes",
        "disableFocusListener",
        "disableHoverListener",
        "disableTouchListener",
        "enterDelay",
        "enterNextDelay",
        "enterTouchDelay",
        "id",
        "interactive",
        "leaveDelay",
        "leaveTouchDelay",
        "onClose",
        "onOpen",
        "open",
        "placement",
        "PopperComponent",
        "PopperProps",
        "title",
        "TransitionComponent",
        "TransitionProps"
    ]);
    var theme = _useThemeDefault.default();
    var _React$useState = _react.useState(), childNode = _React$useState[0], setChildNode = _React$useState[1];
    var _React$useState2 = _react.useState(null), arrowRef = _React$useState2[0], setArrowRef = _React$useState2[1];
    var ignoreNonTouchEvents = _react.useRef(false);
    var closeTimer = _react.useRef();
    var enterTimer = _react.useRef();
    var leaveTimer = _react.useRef();
    var touchTimer = _react.useRef();
    var _useControlled1 = _useControlledDefault.default({
        controlled: openProp,
        default: false,
        name: 'Tooltip',
        state: 'open'
    }), _useControlled2 = _slicedToArrayDefault.default(_useControlled1, 2), openState = _useControlled2[0], setOpenState = _useControlled2[1];
    var open = openState;
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var _React$useRef = _react.useRef(openProp !== undefined), isControlled = _React$useRef.current; // eslint-disable-next-line react-hooks/rules-of-hooks
    _react.useEffect(function() {
        if (childNode && childNode.disabled && !isControlled && title !== '' && childNode.tagName.toLowerCase() === 'button') console.error([
            'Material-UI: You are providing a disabled `button` child to the Tooltip component.',
            'A disabled element does not fire events.',
            "Tooltip needs to listen to the child element's events to display the title.",
            '',
            'Add a simple wrapper element, such as a `span`.'
        ].join('\n'));
    }, [
        title,
        childNode,
        isControlled
    ]);
    var id = _unstableUseIdDefault.default(idProp);
    _react.useEffect(function() {
        return function() {
            clearTimeout(closeTimer.current);
            clearTimeout(enterTimer.current);
            clearTimeout(leaveTimer.current);
            clearTimeout(touchTimer.current);
        };
    }, []);
    var handleOpen = function handleOpen1(event) {
        clearTimeout(hystersisTimer);
        hystersisOpen = true; // The mouseover event will trigger for every nested element in the tooltip.
        // We can skip rerendering when the tooltip is already open.
        // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
        setOpenState(true);
        if (onOpen) onOpen(event);
    };
    var handleEnter = function handleEnter1() {
        var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return function(event) {
            var childrenProps = children.props;
            if (event.type === 'mouseover' && childrenProps.onMouseOver && forward) childrenProps.onMouseOver(event);
            if (ignoreNonTouchEvents.current && event.type !== 'touchstart') return;
             // Remove the title ahead of time.
            // We don't want to wait for the next render commit.
            // We would risk displaying two tooltips at the same time (native + this one).
            if (childNode) childNode.removeAttribute('title');
            clearTimeout(enterTimer.current);
            clearTimeout(leaveTimer.current);
            if (enterDelay || hystersisOpen && enterNextDelay) {
                event.persist();
                enterTimer.current = setTimeout(function() {
                    handleOpen(event);
                }, hystersisOpen ? enterNextDelay : enterDelay);
            } else handleOpen(event);
        };
    };
    var _useIsFocusVisible1 = _useIsFocusVisibleDefault.default(), isFocusVisible = _useIsFocusVisible1.isFocusVisible, onBlurVisible = _useIsFocusVisible1.onBlurVisible, focusVisibleRef = _useIsFocusVisible1.ref;
    var _React$useState3 = _react.useState(false), childIsFocusVisible = _React$useState3[0], setChildIsFocusVisible = _React$useState3[1];
    var handleBlur = function handleBlur1() {
        if (childIsFocusVisible) {
            setChildIsFocusVisible(false);
            onBlurVisible();
        }
    };
    var handleFocus = function handleFocus1() {
        var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return function(event) {
            // Workaround for https://github.com/facebook/react/issues/7769
            // The autoFocus of React might trigger the event before the componentDidMount.
            // We need to account for this eventuality.
            if (!childNode) setChildNode(event.currentTarget);
            if (isFocusVisible(event)) {
                setChildIsFocusVisible(true);
                handleEnter()(event);
            }
            var childrenProps = children.props;
            if (childrenProps.onFocus && forward) childrenProps.onFocus(event);
        };
    };
    var handleClose = function handleClose1(event) {
        clearTimeout(hystersisTimer);
        hystersisTimer = setTimeout(function() {
            hystersisOpen = false;
        }, 800 + leaveDelay);
        setOpenState(false);
        if (onClose) onClose(event);
        clearTimeout(closeTimer.current);
        closeTimer.current = setTimeout(function() {
            ignoreNonTouchEvents.current = false;
        }, theme.transitions.duration.shortest);
    };
    var handleLeave = function handleLeave1() {
        var forward = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
        return function(event) {
            var childrenProps = children.props;
            if (event.type === 'blur') {
                if (childrenProps.onBlur && forward) childrenProps.onBlur(event);
                handleBlur();
            }
            if (event.type === 'mouseleave' && childrenProps.onMouseLeave && event.currentTarget === childNode) childrenProps.onMouseLeave(event);
            clearTimeout(enterTimer.current);
            clearTimeout(leaveTimer.current);
            event.persist();
            leaveTimer.current = setTimeout(function() {
                handleClose(event);
            }, leaveDelay);
        };
    };
    var detectTouchStart = function detectTouchStart1(event) {
        ignoreNonTouchEvents.current = true;
        var childrenProps = children.props;
        if (childrenProps.onTouchStart) childrenProps.onTouchStart(event);
    };
    var handleTouchStart = function handleTouchStart1(event) {
        detectTouchStart(event);
        clearTimeout(leaveTimer.current);
        clearTimeout(closeTimer.current);
        clearTimeout(touchTimer.current);
        event.persist();
        touchTimer.current = setTimeout(function() {
            handleEnter()(event);
        }, enterTouchDelay);
    };
    var handleTouchEnd = function handleTouchEnd1(event) {
        if (children.props.onTouchEnd) children.props.onTouchEnd(event);
        clearTimeout(touchTimer.current);
        clearTimeout(leaveTimer.current);
        event.persist();
        leaveTimer.current = setTimeout(function() {
            handleClose(event);
        }, leaveTouchDelay);
    };
    var handleUseRef = _useForkRefDefault.default(setChildNode, ref);
    var handleFocusRef = _useForkRefDefault.default(focusVisibleRef, handleUseRef); // can be removed once we drop support for non ref forwarding class components
    var handleOwnRef = _react.useCallback(function(instance) {
        // #StrictMode ready
        _setRefDefault.default(handleFocusRef, _reactDom.findDOMNode(instance));
    }, [
        handleFocusRef
    ]);
    var handleRef = _useForkRefDefault.default(children.ref, handleOwnRef); // There is no point in displaying an empty tooltip.
    if (title === '') open = false;
     // For accessibility and SEO concerns, we render the title to the DOM node when
    // the tooltip is hidden. However, we have made a tradeoff when
    // `disableHoverListener` is set. This title logic is disabled.
    // It's allowing us to keep the implementation size minimal.
    // We are open to change the tradeoff.
    var shouldShowNativeTitle = !open && !disableHoverListener;
    var childrenProps = _extendsDefault.default({
        'aria-describedby': open ? id : null,
        title: shouldShowNativeTitle && typeof title === 'string' ? title : null
    }, other, children.props, {
        className: _clsxDefault.default(other.className, children.props.className),
        onTouchStart: detectTouchStart,
        ref: handleRef
    });
    var interactiveWrapperListeners = {
    };
    if (!disableTouchListener) {
        childrenProps.onTouchStart = handleTouchStart;
        childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
        childrenProps.onMouseOver = handleEnter();
        childrenProps.onMouseLeave = handleLeave();
        if (interactive) {
            interactiveWrapperListeners.onMouseOver = handleEnter(false);
            interactiveWrapperListeners.onMouseLeave = handleLeave(false);
        }
    }
    if (!disableFocusListener) {
        childrenProps.onFocus = handleFocus();
        childrenProps.onBlur = handleLeave();
        if (interactive) {
            interactiveWrapperListeners.onFocus = handleFocus(false);
            interactiveWrapperListeners.onBlur = handleLeave(false);
        }
    }
    if (children.props.title) console.error([
        'Material-UI: You have provided a `title` prop to the child of <Tooltip />.',
        "Remove this title prop `".concat(children.props.title, "` or the Tooltip component.")
    ].join('\n'));
    var mergedPopperProps = _react.useMemo(function() {
        return _utils.deepmerge({
            popperOptions: {
                modifiers: {
                    arrow: {
                        enabled: Boolean(arrowRef),
                        element: arrowRef
                    }
                }
            }
        }, PopperProps);
    }, [
        arrowRef,
        PopperProps
    ]);
    return(/*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.cloneElement(children, childrenProps), /*#__PURE__*/ _react.createElement(PopperComponent, _extendsDefault.default({
        className: _clsxDefault.default(classes.popper, interactive && classes.popperInteractive, arrow && classes.popperArrow),
        placement: placement,
        anchorEl: childNode,
        open: childNode ? open : false,
        id: childrenProps['aria-describedby'],
        transition: true
    }, interactiveWrapperListeners, mergedPopperProps), function(_ref) {
        var placementInner = _ref.placement, TransitionPropsInner = _ref.TransitionProps;
        return(/*#__PURE__*/ _react.createElement(TransitionComponent, _extendsDefault.default({
            timeout: theme.transitions.duration.shorter
        }, TransitionPropsInner, TransitionProps), /*#__PURE__*/ _react.createElement("div", {
            className: _clsxDefault.default(classes.tooltip, classes["tooltipPlacement".concat(_capitalizeDefault.default(placementInner.split('-')[0]))], ignoreNonTouchEvents.current && classes.touch, arrow && classes.tooltipArrow)
        }, title, arrow ? /*#__PURE__*/ _react.createElement("span", {
            className: classes.arrow,
            ref: setArrowRef
        }) : null)));
    })));
});
Tooltip.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
   * If `true`, adds an arrow to the tooltip.
   */ arrow: _propTypesDefault.default.bool,
    /**
   * Tooltip reference element.
   */ children: _utils.elementAcceptingRef.isRequired,
    /**
   * Override or extend the styles applied to the component.
   * See [CSS API](#css) below for more details.
   */ classes: _propTypesDefault.default.object,
    /**
   * @ignore
   */ className: _propTypesDefault.default.string,
    /**
   * Do not respond to focus events.
   */ disableFocusListener: _propTypesDefault.default.bool,
    /**
   * Do not respond to hover events.
   */ disableHoverListener: _propTypesDefault.default.bool,
    /**
   * Do not respond to long press touch events.
   */ disableTouchListener: _propTypesDefault.default.bool,
    /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   */ enterDelay: _propTypesDefault.default.number,
    /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   */ enterNextDelay: _propTypesDefault.default.number,
    /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   */ enterTouchDelay: _propTypesDefault.default.number,
    /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */ id: _propTypesDefault.default.string,
    /**
   * Makes a tooltip interactive, i.e. will not close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   */ interactive: _propTypesDefault.default.bool,
    /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   */ leaveDelay: _propTypesDefault.default.number,
    /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   */ leaveTouchDelay: _propTypesDefault.default.number,
    /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   */ onClose: _propTypesDefault.default.func,
    /**
   * Callback fired when the component requests to be open.
   *
   * @param {object} event The event source of the callback.
   */ onOpen: _propTypesDefault.default.func,
    /**
   * If `true`, the tooltip is shown.
   */ open: _propTypesDefault.default.bool,
    /**
   * Tooltip placement.
   */ placement: _propTypesDefault.default.oneOf([
        'bottom-end',
        'bottom-start',
        'bottom',
        'left-end',
        'left-start',
        'left',
        'right-end',
        'right-start',
        'right',
        'top-end',
        'top-start',
        'top'
    ]),
    /**
   * The component used for the popper.
   */ PopperComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the [`Popper`](/api/popper/) element.
   */ PopperProps: _propTypesDefault.default.object,
    /**
   * Tooltip title. Zero-length titles string are never displayed.
   */ title: _propTypesDefault.default/* @typescript-to-proptypes-ignore */ .node.isRequired,
    /**
   * The component used for the transition.
   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   */ TransitionComponent: _propTypesDefault.default.elementType,
    /**
   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
   */ TransitionProps: _propTypesDefault.default.object
};
exports.default = _withStylesDefault.default(styles, {
    name: 'MuiTooltip',
    flip: false
})(Tooltip);
